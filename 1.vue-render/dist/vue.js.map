{"version":3,"file":"vue.js","sources":["../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["/**\n * @name Vue初始化状态、初始化数据\n */\n\n// import { observe } from './observe/index'\n\n// 初始化状态\nexport function initState(vm) {\n  const opts = vm.$options // 获取所有的选项\n  if (opts.data) {\n    initData(vm) // 初始化数据\n  }\n}\n\n// function proxy(vm, target, key) {\n//   Object.defineProperty(vm, key, {\n//     // vm.name\n//     get() {\n//       return vm[target][key] // vm._data.name\n//     },\n//     set(newValue) {\n//       vm[target][key] = newValue\n//     },\n//   })\n// }\n\n// 初始化数据\nfunction initData(vm) {\n  let data = vm.$options.data // data可能是函数和对象\n  data = typeof data === 'function' ? data.call(vm) : data \n\n  vm._data = data // 我将返回的对象放到了_data上\n\n  // // 对数据进行劫持 vue2 里采用了一个api defineProperty\n  // observe(data)\n\n  // // 将vm._data 用vm来代理就可以了\n  // for (let key in data) {\n  //   proxy(vm, '_data', key)\n  // }\n}\n","/**\n * @name 给Vue扩展初始化方法\n */\n\n// import { compileToFunction } from './compiler'\n// import { mountComponent } from './lifecycle'\nimport { initState } from './state'\n\n// 就是给Vue增加init方法的\nexport function initMixin(Vue) {\n  // 用于初始化操作\n  Vue.prototype._init = function (options) {\n    // vm.$options 就是获取用户的配置\n    const vm = this\n    vm.$options = options // 将用户的选项挂载到实例上\n\n    // 初始化状态\n    initState(vm)\n\n    // if (options.el) {\n    //   vm.$mount(options.el) // 实现数据的挂载\n    // }\n  }\n  // Vue.prototype.$mount = function (el) {\n  //   const vm = this\n  //   el = document.querySelector(el)\n  //   let ops = vm.$options\n  //   if (!ops.render) {\n  //     // 先进行查找有没有render函数\n  //     let template // 没有render看一下是否写了tempate, 没写template采用外部的template\n  //     if (!ops.template && el) {\n  //       // 没有写模板 但是写了el\n  //       template = el.outerHTML\n  //     } else {\n  //       if (el) {\n  //         template = ops.template // 如果有el 则采用模板的内容\n  //       }\n  //     }\n  //     // 写了temlate 就用 写了的template\n  //     if (template && el) {\n  //       // 这里需要对模板进行编译\n  //       const render = compileToFunction(template)\n  //       ops.render = render // jsx 最终会被编译成h('xxx')\n  //     }\n  //   }\n  //   mountComponent(vm, el) // 组件的挂载\n  //   // 最终就可以获取render方法\n  //   // script 标签引用的vue.global.js 这个编译过程是在浏览器运行的\n  //   // runtime是不包含模板编译的, 整个编译是打包的时候通过loader来转义.vue文件的, 用runtime的时候不能使用template\n  // }\n}\n","/**\r\n * @name 实现Vue构造函数\r\n */\r\n\r\nimport { initMixin } from \"./init\";\r\n// import { initLifeCycle } from \"./lifecycle\";\r\n\r\n// 通过构造函数扩展方法\r\nfunction Vue(options){ // options就是用户的选项\r\n    this._init(options); // 默认就调用了init\r\n}\r\n\r\ninitMixin(Vue); // 在Vue原型上扩展init方法\r\n// initLifeCycle(Vue);\r\n\r\n\r\nexport default Vue"],"names":["initState","vm","opts","$options","data","initData","call","_data","initMixin","Vue","prototype","_init","options"],"mappings":";;;;;;EAAA;EACA;EACA;;EAEA;;EAEA;EACO,SAASA,SAAS,CAACC,EAAE,EAAE;EAC5B,EAAA,MAAMC,IAAI,GAAGD,EAAE,CAACE,QAAQ,CAAC;IACzB,IAAID,IAAI,CAACE,IAAI,EAAE;MACbC,QAAQ,CAACJ,EAAE,CAAC,CAAC;EACf,GAAA;EACF,CAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA,SAASI,QAAQ,CAACJ,EAAE,EAAE;EACpB,EAAA,IAAIG,IAAI,GAAGH,EAAE,CAACE,QAAQ,CAACC,IAAI,CAAC;EAC5BA,EAAAA,IAAI,GAAG,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,CAACE,IAAI,CAACL,EAAE,CAAC,GAAGG,IAAI,CAAA;EAExDH,EAAAA,EAAE,CAACM,KAAK,GAAGH,IAAI,CAAC;;EAEhB;EACA;;EAEA;EACA;EACA;EACA;EACF;;ECxCA;EACA;EACA;;EAMA;EACO,SAASI,SAAS,CAACC,GAAG,EAAE;EAC7B;EACAA,EAAAA,GAAG,CAACC,SAAS,CAACC,KAAK,GAAG,UAAUC,OAAO,EAAE;EACvC;MACA,MAAMX,EAAE,GAAG,IAAI,CAAA;EACfA,IAAAA,EAAE,CAACE,QAAQ,GAAGS,OAAO,CAAC;;EAEtB;MACAZ,SAAS,CAACC,EAAE,CAAC,CAAA;;EAEb;EACA;EACA;KACD,CAAA;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACF;;EClDA;EACA;EACA;EAGA;;EAEA;EACA,SAASQ,GAAG,CAACG,OAAO,EAAC;EAAE;EACnB,EAAA,IAAI,CAACD,KAAK,CAACC,OAAO,CAAC,CAAC;EACxB,CAAA;;EAEAJ,SAAS,CAACC,GAAG,CAAC,CAAC;;;;;;;;"}