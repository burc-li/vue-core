{"version":3,"file":"vue.js","sources":["../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["// 我们希望重写数组中的部分方法\nlet oldArrayProto = Array.prototype; // 获取数组的原型\n// newArrayProto.__proto__  = oldArrayProto\nexport let newArrayProto = Object.create(oldArrayProto);\n\nlet methods = [ // 找到所有的变异方法\n    'push',\n    'pop',\n    'shift',\n    'unshift',\n    'reverse',\n    'sort',\n    'splice'\n] // concat slice 都不会改变原数组\nmethods.forEach(method => {\n    // arr.push(1,2,3)\n    newArrayProto[method] = function (...args) { // 这里重写了数组的方法\n        // push.call(arr)\n        // todo...\n        const result = oldArrayProto[method].call(this, ...args); // 内部调用原来的方法 ， 函数的劫持  切片编程\n        // 我们需要对新增的 数据再次进行劫持\n        let inserted;\n        let ob = this.__ob__;\n        switch (method) {\n            case 'push':\n            case 'unshift': // arr.unshift(1,2,3)\n                inserted = args;\n                break;\n            case 'splice':  // arr.splice(0,1,{a:1},{a:1})\n                inserted = args.slice(2);\n            default:\n                break;\n        }\n        // console.log(inserted); // 新增的内容\n        if(inserted) {\n            // 对新增的内容再次进行观测  \n            ob.observeArray(inserted);\n        }\n        return result\n    }\n})\n\n// Vue 的响应式是通过 Object.defineProperty() 实现的，这个 api 没办法监听数组长度的变化，也就没办法监听数组的新增。\n// Vue 无法检测通过数组索引改变数组的操作，这不是 Object.defineProperty() api 的原因，而是尤大认为性能消耗与带来的用户体验不成正比。对数组进行响应式检测会带来很大的性能消耗，因为数组项可能会大，比如1000条、10000条。\n\n// defineProperty无法监听数组长度的变化，无法监听数组的新增，即无法触set方法。手动对新增内容进行观测\n// 手动触发更新 - ob.dep.notify()","/**\n * @name 数据劫持\n * @todo 1. 只对对象进行劫持\n * @todo 2. 如果一个对象被劫持过了，那就不需要再被劫持了 (要判断一个对象是否被劫持过，可以增添一个实例，用实例来判断是否被劫持过)\n * @todo 3. Object.defineProperty只能劫持已经存在的属性，新增属性无法劫持 （vue里面会为此单独写一些api  $set $delete）\n * @todo 4. 循环对象，对属性依次递归劫持，性能差\n */\n\nimport { newArrayProto } from './array'\n\nclass Observer {\n  constructor(data) {\n    // // Object.defineProperty只能劫持已经存在的属性，新增属性无法劫持 （vue里面会为此单独写一些api  $set $delete）\n    // Object.defineProperty(data, '__ob__', {\n    //   value: this,\n    //   enumerable: false, // 将__ob__ 变成不可枚举 （循环的时候无法获取到）\n    // })\n    // data.__ob__ = this; // 给数据加了一个标识 如果数据上有__ob__ 则说明这个属性被观测过了\n    // if (Array.isArray(data)) {\n    //   // 这里我们可以重写数组中的方法 7个变异方法 是可以修改数组本身的\n    //   data.__proto__ = newArrayProto // 需要保留数组原有的特性，并且可以重写部分方法\n    //   this.observeArray(data) // 如果数组中放的是对象 可以监控到对象的变化\n    // } else {\n      this.walk(data)\n    // }\n  }\n\n  // 循环对象 对属性依次劫持，性能差 \"重新定义属性\"\n  walk(data) {\n    Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\n  }\n\n  // 观测数组\n  // observeArray(data) {\n  //   data.forEach(item => observe(item))\n  // }\n}\n\n// 使用defineProperty API进行属性劫持\nexport function defineReactive(target, key, value) {\n  // 深度属性劫持，对所有的对象都进行属性劫持\n  observe(value) \n\n  Object.defineProperty(target, key, {\n    // 取值的时候 会执行get\n    get() {\n      console.log('get_v2')\n      return value\n    },\n    // 修改的时候 会执行set\n    set(newValue) {\n      console.log('set_v2')\n      if (newValue === value) return\n      // observe(newValue)\n      value = newValue\n    },\n  })\n}\n\n// 数据劫持\nexport function observe(data) {\n  // 只对对象进行劫持\n  if (typeof data !== 'object' || data == null) {\n    return\n  }\n\n  // 如果一个对象被劫持过了，那就不需要再被劫持了 (要判断一个对象是否被劫持过，可以增添一个实例，用实例来判断是否被劫持过)\n  if (data.__ob__ instanceof Observer) {\n    // 说明这个对象被代理过了\n    return data.__ob__\n  }\n\n  return new Observer(data)\n}\n","/**\n * @name Vue初始化状态、初始化数据\n * @todo 1. 对data进行劫持，并将data挂载到vm上 vm._data = data\n * @todo 2. 循环data，将vm._data用vm来代理\n */\n\nimport { observe } from './observe/index'\n\n// 初始化状态\nexport function initState(vm) {\n  const opts = vm.$options // 获取所有的选项\n  if (opts.data) {\n    initData(vm) // 初始化数据\n  }\n}\n\nfunction proxy(vm, target, key) {\n  Object.defineProperty(vm, key, {\n    // vm.name\n    get() {\n      return vm[target][key] // vm._data.name\n    },\n    set(newValue) {\n      vm[target][key] = newValue\n    },\n  })\n}\n\n\n// 初始化数据\nfunction initData(vm) {\n  let data = vm.$options.data // data可能是函数和对象\n  data = typeof data === 'function' ? data.call(vm) : data\n\n  vm._data = data // 我将返回的对象放到了_data上\n\n  // vue2采用 defineProperty API，对data进行劫持\n  observe(data)\n\n  // 将vm._data 用 vm来代理 ，访问 vm.name = vm._data.name\n  for (let key in data) {\n    if(key === '_data') return\n\n    proxy(vm, '_data', key)\n  }\n}\n","/**\n * @name 给Vue扩展初始化方法\n */\n\n// import { compileToFunction } from './compiler'\n// import { mountComponent } from './lifecycle'\nimport { initState } from './state'\n\n// 就是给Vue增加init方法的\nexport function initMixin(Vue) {\n  // 用于初始化操作\n  Vue.prototype._init = function (options) {\n    // vm.$options 就是获取用户的配置\n    const vm = this\n    vm.$options = options // 将用户的选项挂载到实例上\n\n    // 初始化状态\n    initState(vm)\n\n    // if (options.el) {\n    //   vm.$mount(options.el) // 实现数据的挂载\n    // }\n  }\n  // Vue.prototype.$mount = function (el) {\n  //   const vm = this\n  //   el = document.querySelector(el)\n  //   let ops = vm.$options\n  //   if (!ops.render) {\n  //     // 先进行查找有没有render函数\n  //     let template // 没有render看一下是否写了tempate, 没写template采用外部的template\n  //     if (!ops.template && el) {\n  //       // 没有写模板 但是写了el\n  //       template = el.outerHTML\n  //     } else {\n  //       if (el) {\n  //         template = ops.template // 如果有el 则采用模板的内容\n  //       }\n  //     }\n  //     // 写了temlate 就用 写了的template\n  //     if (template && el) {\n  //       // 这里需要对模板进行编译\n  //       const render = compileToFunction(template)\n  //       ops.render = render // jsx 最终会被编译成h('xxx')\n  //     }\n  //   }\n  //   mountComponent(vm, el) // 组件的挂载\n  //   // 最终就可以获取render方法\n  //   // script 标签引用的vue.global.js 这个编译过程是在浏览器运行的\n  //   // runtime是不包含模板编译的, 整个编译是打包的时候通过loader来转义.vue文件的, 用runtime的时候不能使用template\n  // }\n}\n","/**\r\n * @name 实现Vue构造函数\r\n */\r\n\r\nimport { initMixin } from \"./init\";\r\n// import { initLifeCycle } from \"./lifecycle\";\r\n\r\n// 通过构造函数扩展方法\r\nfunction Vue(options){ // options就是用户的选项\r\n    this._init(options); // 默认就调用了init\r\n}\r\n\r\ninitMixin(Vue); // 在Vue原型上扩展init方法\r\n// initLifeCycle(Vue);\r\n\r\n\r\nexport default Vue"],"names":["oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","forEach","method","args","result","call","inserted","ob","__ob__","slice","observeArray","Observer","constructor","data","walk","keys","key","defineReactive","target","value","observe","defineProperty","get","console","log","set","newValue","initState","vm","opts","$options","initData","proxy","_data","initMixin","Vue","_init","options"],"mappings":"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"}