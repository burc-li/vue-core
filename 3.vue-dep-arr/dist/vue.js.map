{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/index.js","../src/observe/dep.js","../src/observe/watcher.js","../src/vdom/index.js","../src/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["/**\r\n * @name 正则表达式，用于匹配开始标签、结束标签、属性\r\n * @returns\r\n */\r\n\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\r\n// 匹配的是 <xxx  第一个分组就是开始标签的名字\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`)\r\n// 匹配的是 </xxxx>  第一个分组就是结束标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\r\n// 分组1: 属性的key 分组2: =  分组3/分组4/分组5: value值\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/ // 匹配属性\r\nconst startTagClose = /^\\s*(\\/?)>/ // 匹配开始标签的结束 > 或 />  <div id = 'app' >  <br/>\r\n\r\n/**\r\n * @name 对模板进行编译处理\r\n * @desc 循环遍历html字符串，利用正则表达式对其进行匹配【开始标签、属性、开始标签的闭合标签、文本、结束标签】，\r\n * @desc 利用 start chars end 方法去处理开始标签、文本、结束标签\r\n * @desc 利用栈型结构，构造一颗AST语法树，匹配到开始标签就入栈，匹配到结束标签就出栈\r\n */\r\n// 对模板进行编译处理\r\nexport function parseHTML(html) {\r\n  const ELEMENT_TYPE = 1 // 元素类型\r\n  const TEXT_TYPE = 3 // 文本类型\r\n  const stack = [] // 用于存放元素的栈\r\n  let currentParent // 指向的是栈中的最后一个\r\n  let root\r\n\r\n  // 最终需要转化成一颗抽象语法树\r\n  function createASTElement(tag, attrs) {\r\n    return {\r\n      tag, // 标签名\r\n      type: ELEMENT_TYPE, // 类型\r\n      attrs, // 属性\r\n      parent: null,\r\n      children: [],\r\n    }\r\n  }\r\n\r\n  // 处理开始标签，利用栈型结构 来构造一颗树\r\n  function start(tag, attrs) {\r\n    let node = createASTElement(tag, attrs) // 创造一个 ast节点\r\n    if (!root) {\r\n      root = node // 如果root为空，则当前是树的根节点\r\n    }\r\n    if (currentParent) {\r\n      node.parent = currentParent // 只赋予了parent属性\r\n      currentParent.children.push(node) // 还需要让父亲记住自己\r\n    }\r\n    stack.push(node)\r\n    currentParent = node // currentParent为栈中的最后一个\r\n  }\r\n\r\n  // 处理文本\r\n  function chars(text) {\r\n    text = text.replace(/\\s/g, '')\r\n    // 文本直接放到当前指向的节点中\r\n    if (text) {\r\n      currentParent.children.push({\r\n        type: TEXT_TYPE,\r\n        text,\r\n        parent: currentParent,\r\n      })\r\n    }\r\n  }\r\n\r\n  // 处理结束标签\r\n  function end(tag) {\r\n    stack.pop() // 弹出栈中最后一个ast节点\\\r\n    currentParent = stack[stack.length - 1]\r\n  }\r\n\r\n  // 剔除 template 已匹配的内容\r\n  function advance(n) {\r\n    html = html.substring(n)\r\n  }\r\n\r\n  // 解析开始标签\r\n  function parseStartTag() {\r\n    const start = html.match(startTagOpen)\r\n    if (start) {\r\n      const match = {\r\n        tagName: start[1], // 标签名\r\n        attrs: [],\r\n      }\r\n      advance(start[0].length)\r\n\r\n      let attr, end\r\n      // 如果不是开始标签的结束 就一直匹配下去\r\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n        advance(attr[0].length)\r\n        match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] || true })\r\n      }\r\n\r\n      // 如果不是开始标签的结束\r\n      if (end) {\r\n        advance(end[0].length)\r\n      }\r\n      return match\r\n    }\r\n    return false\r\n  }\r\n\r\n  while (html) {\r\n    // 如果textEnd = 0 说明是一个开始标签或者结束标签\r\n    // 如果textEnd > 0 说明就是文本的结束位置\r\n    let textEnd = html.indexOf('<')\r\n    if (textEnd == 0) {\r\n      // 开始标签的解析結果，包括 标签名 和 属性\r\n      const startTagMatch = parseStartTag()\r\n\r\n      if (startTagMatch) {\r\n        start(startTagMatch.tagName, startTagMatch.attrs)\r\n        continue\r\n      }\r\n\r\n      // 匹配结束标签\r\n      let endTagMatch = html.match(endTag)\r\n      if (endTagMatch) {\r\n        advance(endTagMatch[0].length)\r\n        end(endTagMatch[1])\r\n        continue\r\n      }\r\n    }\r\n    if (textEnd > 0) {\r\n      let text = html.substring(0, textEnd) // 截取文本内容\r\n      if (text) {\r\n        chars(text)\r\n        advance(text.length)\r\n      }\r\n    }\r\n  }\r\n\r\n  return root\r\n}\r\n","import { parseHTML } from './parse'\r\n\r\n// 根据ast语法树的 attrs属性对象 生成相对应的属性字符串\r\nfunction genProps(attrs) {\r\n  let str = ''\r\n  for (let i = 0; i < attrs.length; i++) {\r\n    let attr = attrs[i]\r\n    if (attr.name === 'style') {\r\n      // color:red;background:red => {color:'red',background:red}\r\n      let obj = {}\r\n      // 可以使用 qs 库\r\n      attr.value.split(';').forEach(item => {\r\n        let [key, value] = item.split(':')\r\n        obj[key.trim()] = value.trim()\r\n      })\r\n      attr.value = obj\r\n    }\r\n    str += `${attr.name}:${JSON.stringify(attr.value)},` // id:'app',class:'app-inner',\r\n  }\r\n  return `{${str.slice(0, -1)}}`\r\n}\r\n\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g // 匹配到的内容就是我们表达式的变量，例如 {{ name }}\r\nfunction gen(node) {\r\n  if (node.type === 1) {\r\n    // 元素\r\n    return codegen(node)\r\n  } else {\r\n    // 文本\r\n    let text = node.text\r\n    if (!defaultTagRE.test(text)) {\r\n      // _v('hello')\r\n      return `_v(${JSON.stringify(text)})`\r\n    } else {\r\n      //_v( _s(name) + 'hello' + _s(age))\r\n      let tokens = []\r\n      let match\r\n      defaultTagRE.lastIndex = 0\r\n      let lastIndex = 0\r\n      while ((match = defaultTagRE.exec(text))) {\r\n        let index = match.index // 匹配项的第一个字符在字符串中的位置  {{name}} hello  {{age}} word\r\n        if (index > lastIndex) {\r\n          tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n        }\r\n        tokens.push(`_s(${match[1].trim()})`)\r\n        lastIndex = index + match[0].length\r\n      }\r\n      if (lastIndex < text.length) {\r\n        tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n      }\r\n      return `_v(${tokens.join('+')})`\r\n    }\r\n  }\r\n}\r\n\r\n// 根据ast语法树的 children对象 生成相对应的 children字符串\r\nfunction genChildren(children) {\r\n  return children.map(child => gen(child)).join(',')\r\n}\r\n\r\n/**\r\n * @name 代码生成\r\n * @desc 生成指定格式的render方法代码字符串，再利用模版引擎生成render函数\r\n * @desc 我们会在Vue原型上扩展 render 函数相关的方法， _c _s _v\r\n * @desc _c: 创建节点虚拟节点VNode    _v: 创建文本虚拟节点VNode   _s: 处理变量\r\n */\r\nfunction codegen(ast) {\r\n  let children = genChildren(ast.children)\r\n  let code = `_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'}${ast.children.length ? `,${children}` : ''})`\r\n\r\n  return code\r\n}\r\n\r\nexport function compileToFunction(template) {\r\n  console.log('html模版字符串：\\n', template)\r\n\r\n  // 1.就是将 template 转化成 ast 语法树\r\n  let ast = parseHTML(template)\r\n  console.log('AST语法树：\\n', ast)\r\n\r\n  // 2.生成render方法代码字符串 (render方法执行后的返回的结果就是 虚拟DOM)\r\n  let code = codegen(ast)\r\n  console.log('代码串：\\n', code)\r\n\r\n  // 模板引擎的实现原理就是 with + new Function\r\n  code = `with(this){return ${code}}`\r\n\r\n  let render = new Function(code) // 根据代码生成render函数\r\n  console.log('render：\\n', render)\r\n\r\n  return render\r\n}\r\n\r\n//  html模版字符串\r\n// <div id=\"app\" style=\"color: red; background: yellow\">\r\n//   hello {{ name }} world\r\n//   <span></span>\r\n// </div>\r\n\r\n// 转换为 AST语法树\r\n// {\r\n//   tag: 'div',\r\n//   type: 1,\r\n//   attrs: [\r\n//     { name: 'id', value: 'app' },\r\n//     { name: 'style', value: { color: 'red', background: 'yellow' } },\r\n//   ],\r\n//   parent: null,\r\n//   children: [\r\n//     { text: 'hello{{name}}world', type: 3, parent: {...} },\r\n//     { tag: 'span', type: 1, attrs: [], children: [], parent: {...} },\r\n//   ],\r\n// }\r\n\r\n// 将 AST语法树 转化成 render代码字符串\r\n// _c: 创建节点虚拟节点VNode    _v: 创建文本虚拟节点VNode   _s: 处理变量\r\n// `_c('div',{id:\"app\",style:{\"color\":\"red\",\" background\":\"yellow\"}},_v(\"hello\"+_s(name)+\"world\"),_c('span',null))`\r\n// 利用模版引擎转换成可执行的render函数\r\n// ƒ anonymous(\r\n//   ) {\r\n//     with(this){\r\n//       return _c('div',{id:\"app\",style:{\"color\":\"red\",\"background\":\"yellow\"}},\r\n//                 _v(\"hello\"+_s(name)+\"world\"),\r\n//                 _c('span',null))}\r\n//   }","/**\r\n * @name Dep收集器\r\n * @decs 每个响应式属性有一个 dep 收集器（属性就是被观察者，watcher就是观察者），属性变化了会通知观察者来更新 -》 这就是我们的观察者模式\r\n * @decs 需要给每个响应式属性增加一个 dep， 目的就是收集watcher，当响应式数据发生变化时，更新收集的所有 watcher\r\n * @todo 1. dep 和 watcher 是一个多对多的关系\r\n * @todo 2. 一个属性可以在多个组件中使用 （一个 dep 对应多个 watcher）\r\n * @todo 3. 一个组件中由多个属性组成 （一个 watcher 对应多个 dep）\r\n */\r\n\r\nlet id = 0\r\n\r\nclass Dep {\r\n  constructor() {\r\n    this.id = id++\r\n    this.subs = [] // 这里存放着当前属性对应的 watcher\r\n  }\r\n  // 让watcher记住 dep\r\n  depend() {\r\n    console.log('双向依赖收集')\r\n    Dep.target.addDep(this)\r\n  }\r\n  // 给当前的 dep 添加 watcher\r\n  addSub(watcher) {\r\n    this.subs.push(watcher)\r\n  }\r\n  // 更新当前 dep 关联的所有 watcher\r\n  notify() {\r\n    this.subs.forEach(watcher => watcher.update())\r\n  }\r\n}\r\n\r\n// 当前渲染的 watcher，静态变量，类似于全局变量，只有一份\r\nDep.target = null\r\n\r\nexport default Dep\r\n","/**\r\n * @name Watcher\r\n * @decs 每个响应式属性有一个dep 收集器（属性就是被观察者，watcher就是观察者），属性变化了会通知观察者来更新 -》 这就是我们的观察者模式\r\n * @decs 不同组件有不同的 watcher，目前我们只有一个渲染根实例的 watcher\r\n * @todo 1. 当我们创建渲染 watcher 的时候，我们会把当前的渲染 watcher 放到 Dep.target 上\r\n * @todo 2. 调用_render() 会取值，走到 getter 上，调用 dep.depend() 进行双向依赖收集操作\r\n */\r\n\r\nimport Dep from './dep'\r\n\r\nlet id = 0\r\n\r\nclass Watcher {\r\n  constructor(vm, fn) {\r\n    this.id = id++\r\n    this.getter = fn\r\n    this.deps = [] // 用于后续我们实现计算属性，和一些清理工作\r\n    this.depsId = new Set()\r\n    this.get()\r\n  }\r\n  addDep(dep) {\r\n    // 一个组件 对应 多个属性 重复的属性不用记录，去重操作\r\n    let id = dep.id\r\n    if (!this.depsId.has(id)) {\r\n      this.deps.push(dep)\r\n      this.depsId.add(id)\r\n      dep.addSub(this) // watcher已经记住了dep，而且已经去重了，此时让 dep 也记住 watcher\r\n    }\r\n  }\r\n  get() {\r\n    // debugger\r\n    Dep.target = this // Dep.target 是一个静态属性\r\n\r\n    // 执行vm._render时，去vm上取 name 和 age。vm._render -> vm.$options.render.call(vm) -> with(this){} -> _s(name) -> 就会去作用域链 即this 上取 name\r\n    // JavaScript 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 context 或者包含这个变量的函数有关。'with'语句将某个对象添加到作用域链的顶部，如果在 statement 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值\r\n    this.getter()\r\n\r\n    Dep.target = null // 渲染完毕后就清空，保证了只有在模版渲染阶段的取值操作才会进行依赖收集\r\n  }\r\n  // // 重新渲染\r\n  // update() {\r\n  //   console.log('watcher-update')\r\n  //   this.get()\r\n  // }\r\n  // 重新渲染\r\n  update() {\r\n    console.log('watcher-update')\r\n    queueWatcher(this) // 把当前的 watcher 暂存起来\r\n    // this.get(); // 重新渲染\r\n  }\r\n  run() {\r\n    this.get() // 渲染的时候用的是最新的 vm 来渲染的\r\n  }\r\n}\r\n\r\n/** 实现内部 watcher 异步更新 - nextTick */\r\nlet queue = []\r\nlet has = {}\r\nlet pending = false // 防抖\r\nfunction flushSchedulerQueue() {\r\n  let flushQueue = queue.slice(0)\r\n  queue = []\r\n  has = {}\r\n  pending = false\r\n  flushQueue.forEach(q => q.run()) // 在刷新的过程中可能还有新的 watcher，重新放到 queue 中\r\n}\r\nfunction queueWatcher(watcher) {\r\n  const id = watcher.id\r\n  if (!has[id]) {\r\n    queue.push(watcher)\r\n    has[id] = true\r\n    // 不管我们的 update 执行多少次 ，但是最终只执行一轮刷新操作\r\n    if (!pending) {\r\n      nextTick(flushSchedulerQueue)\r\n      pending = true\r\n    }\r\n  }\r\n}\r\n\r\n/** 实现暴露给用户API回调的异步更新 - nextTick */\r\nlet callbacks = [] // 存储 nextTick 回调\r\nlet waiting = false // 防抖\r\nfunction flushCallbacks() {\r\n  let cbs = callbacks.slice(0)\r\n  waiting = false\r\n  callbacks = []\r\n  cbs.forEach(cb => cb()) // 按照顺序依次执行\r\n}\r\n// vue2中 nextTick 没有直接使用某个api 而是采用优雅降级的方式\r\n// 内部先采用的是 promise(IE不兼容，微任务)  MutationObserver(H5的api，微任务)  setImmediate(IE专享，宏任务)  setTimeout（宏任务)\r\n// let timerFunc;\r\n// if (Promise) {\r\n//     timerFunc = () => {\r\n//         Promise.resolve().then(flushCallbacks)\r\n//     }\r\n// }else if(MutationObserver){\r\n//     let observer = new MutationObserver(flushCallbacks); // 这里传入的回调是异步执行的\r\n//     let textNode = document.createTextNode(1);\r\n//     observer.observe(textNode,{\r\n//         characterData:true\r\n//     });\r\n//     timerFunc = () => {\r\n//         textNode.textContent = 2;\r\n//     }\r\n// }else if(setImmediate){\r\n//     timerFunc = () => {\r\n//        setImmediate(flushCallbacks);\r\n//     }\r\n// }else{\r\n//     timerFunc = () => {\r\n//         setTimeout(flushCallbacks);\r\n//      }\r\n// }\r\nexport function nextTick(cb) {\r\n  // 先内部还是先用户的？按照顺序依次执行\r\n  callbacks.push(cb) // 维护 nextTick 中的 cakllback 方法\r\n  if (!waiting) {\r\n    // timerFunc()\r\n    Promise.resolve().then(flushCallbacks)\r\n    waiting = true\r\n  }\r\n}\r\n\r\nexport default Watcher\r\n","/**\r\n * @name 虚拟DOM相关方法\r\n */\r\n\r\n// h()  _c() 创建元素的虚拟节点\r\nexport function createElementVNode(vm, tag, data, ...children) {\r\n  if (data == null) {\r\n    data = {}\r\n  }\r\n  let key = data.key\r\n  if (key) {\r\n    delete data.key\r\n  }\r\n  return vnode(vm, tag, key, data, children)\r\n}\r\n\r\n// _v() 创建文本虚拟节点\r\nexport function createTextVNode(vm, text) {\r\n  return vnode(vm, undefined, undefined, undefined, undefined, text)\r\n}\r\n\r\n// VNode 和 AST一样吗？ AST做的是语法层面的转化，他描述的是语法本身 (可以描述 js css html)\r\n// 我们的VNode 是描述的dom元素，可以增加一些自定义属性\r\nfunction vnode(vm, tag, key, data, children, text) {\r\n  return {\r\n    vm,\r\n    tag,\r\n    key,\r\n    data,\r\n    children,\r\n    text,\r\n    // ....\r\n  }\r\n}\r\n","/**\r\n * @name 初始化元素\r\n * @desc 在Vue原型上扩展 render 函数相关的方法， _c _s _v _update...\r\n * @desc 调用render方法产生虚拟DOM，即以 VNode节点作为基础的树\r\n * @desc 将vnode转化成真实dom 并 挂载页面\r\n * @desc patch既有初始化元素的功能 ，又有更新元素的功能\r\n */\r\n\r\nimport Watcher from \"./observe/watcher\";\r\nimport { createElementVNode, createTextVNode } from './vdom'\r\n\r\n// 利用vnode创建真实元素\r\nfunction createElm(vnode) {\r\n  let { tag, data, children, text } = vnode\r\n  if (typeof tag === 'string') {\r\n    // 标签\r\n    vnode.el = document.createElement(tag) // 这里将真实节点和虚拟节点对应起来，后续如果修改属性了\r\n    patchProps(vnode.el, data)\r\n    children.forEach(child => {\r\n      vnode.el.appendChild(createElm(child))\r\n    })\r\n  } else {\r\n    vnode.el = document.createTextNode(text)\r\n  }\r\n  return vnode.el\r\n}\r\n// 对比属性打补丁\r\nfunction patchProps(el, props) {\r\n  for (let key in props) {\r\n    if (key === 'style') {\r\n      // { color: 'red', \"background\": 'yellow' }\r\n      for (let styleName in props.style) {\r\n        el.style[styleName] = props.style[styleName]\r\n      }\r\n    } else {\r\n      el.setAttribute(key, props[key])\r\n    }\r\n  }\r\n}\r\n// patch既有初始化元素的功能 ，又有更新元素的功能\r\nfunction patch(oldVNode, vnode) {\r\n  // 写的是初渲染流程\r\n  const isRealElement = oldVNode.nodeType\r\n  if (isRealElement) {\r\n    const elm = oldVNode // 获取真实元素\r\n    const parentElm = elm.parentNode // 拿到父元素\r\n    let newElm = createElm(vnode)\r\n    console.log('利用vnode创建真实元素\\n', newElm, parentElm)\r\n\r\n    parentElm.insertBefore(newElm, elm.nextSibling)\r\n    parentElm.removeChild(elm) // 删除老节点\r\n\r\n    return newElm\r\n  } else {\r\n    // diff算法\r\n  }\r\n}\r\n\r\n// 在Vue原型上扩展 render 函数相关的方法， _c _s _v ...\r\nexport function initLifeCycle(Vue) {\r\n  // _c('div',{},...children)\r\n  // _c('div',{id:\"app\",style:{\"color\":\"red\",\" background\":\"yellow\"}},_v(\"hello\"+_s(name)+\"world\"),_c('span',null))\r\n  Vue.prototype._c = function () {\r\n    return createElementVNode(this, ...arguments)\r\n  }\r\n  // _v(text)\r\n  Vue.prototype._v = function () {\r\n    return createTextVNode(this, ...arguments)\r\n  }\r\n  Vue.prototype._s = function (value) {\r\n    if (typeof value !== 'object') return value\r\n    return JSON.stringify(value)\r\n  }\r\n  Vue.prototype._render = function () {\r\n    // 当渲染的时候会去实例中取值，我们就可以将属性和视图绑定在一起\r\n    const vm = this\r\n    return vm.$options.render.call(vm) // 通过ast语法转义后生成的 render方法\r\n  }\r\n  Vue.prototype._update = function (vnode) {\r\n    // 将vnode转化成真实dom\r\n    const vm = this\r\n    const el = vm.$el\r\n    // patch既有初始化元素的功能 ，又有更新元素的功能\r\n    vm.$el = patch(el, vnode)\r\n  }\r\n}\r\n\r\n// 初始化元素\r\nexport function mountComponent(vm, el) {\r\n  // 这里的el 是通过querySelector获取的\r\n  vm.$el = el\r\n\r\n  const updateComponent = () => {\r\n    // vm._render 创建虚拟DOM\r\n    // vm._update 把 VNode 渲染成真实的DOM\r\n    vm._update(vm._render())\r\n  }\r\n\r\n  // true用于标识是一个渲染watcher\r\n  const watcher = new Watcher(vm, updateComponent, true)\r\n  console.log('watcher',watcher)\r\n}\r\n\r\n// vue核心流程\r\n// 1） 创造了响应式数据\r\n// 2） 将模板字符串 转换成 ast语法树\r\n// 3)  将ast语法树 转换成 指定格式的render函数字符串，利用模版引擎再次转换成 render函数，后续每次数据更新可以只执行render函数 (无需再次执行ast转化的过程)\r\n// 4） 利用render函数去创建 虚拟DOM（使用响应式数据）\r\n// 5） 根据生成的虚拟节点创造真实的DOM\r\n","/**\r\n * @name 重写数组7个可以改变自身的方法，切片编程\r\n * @todo 1. Vue 的响应式是通过 Object.defineProperty() 实现的，这个 api 没办法监听数组长度的变化，也就没办法监听数组的新增。\r\n * @todo 2. Vue 无法检测通过数组索引改变数组的操作，这不是 Object.defineProperty() api 的原因，而是尤大认为性能消耗与带来的用户体验不成正比。对数组进行响应式检测会带来很大的性能消耗，因为数组项可能会大，比如1000条、10000条。\r\n * @todo 3. defineProperty无法监听数组的新增，即无法触发set方法。可手动对新增内容进行观测 并 手动触发watcher更新 - ob.dep.notify()\r\n */\r\n\r\nlet oldArrayProto = Array.prototype // 获取数组的原型\r\n// newArrayProto.__proto__  = oldArrayProto\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\n// 找到所有的变异方法\r\nlet methods = ['push', 'pop', 'shift', 'unshift', 'reverse', 'sort', 'splice'] // concat slice 都不会改变原数组\r\n\r\nmethods.forEach(method => {\r\n  // 这里重写了数组的方法\r\n  newArrayProto[method] = function (...args) {\r\n    // args reset参数收集，args为真正数组，arguments为伪数组\r\n    const result = oldArrayProto[method].call(this, ...args) // 内部调用原来的方法，函数的劫持，切片编程\r\n\r\n    // 我们需要对新增的数据再次进行劫持\r\n    let inserted\r\n    let ob = this.__ob__\r\n\r\n    switch (method) {\r\n      case 'push':\r\n      case 'unshift': // arr.unshift(1,2,3)\r\n        inserted = args\r\n        break\r\n      case 'splice': // arr.splice(0,1,{a:1},{a:1})\r\n        inserted = args.slice(2)\r\n      default:\r\n        break\r\n    }\r\n\r\n    if (inserted) {\r\n      // 对新增的内容再次进行观测\r\n      ob.observeArray(inserted)\r\n    }\r\n\r\n    // 通知 watcher 更新渲染\r\n    ob.dep.notify()\r\n    return result\r\n  }\r\n})\r\n","/**\r\n * @name 数据劫持\r\n * @todo 1. 只对对象进行劫持\r\n * @todo 2. 如果一个对象被劫持过了，那就不需要再被劫持了 (要判断一个对象是否被劫持过，可以在对象上增添一个实例，用实例的原型链来判断是否被劫持过)\r\n * @todo 3. Object.defineProperty只能劫持已经存在的属性，对象新增属性和数组新增元素无法劫持 （vue会为此单独写一些api语法糖  $set $delete）\r\n * @todo 4. 循环对象，对属性依次递归劫持，性能差\r\n * @todo 5. setter方法中修改属性之后重新观测，目的：新值为对象或数组的话，可以劫持其数据\r\n * @todo 6. 重写数组7个可以改变自身的方法，切片编程\r\n * @todo 7. this 实例挂载到 data 数据上，将__ob__ 变成不可枚举，防止栈溢出【用于判断对象是否被劫持过 和 劫持变异数组新增数据】\r\n * @todo 8. 触发 getter 时双向依赖收集操作 dep.depend()\r\n * @todo 9. 触发 setter 时通知 watcher 更新 dep.notify()\r\n * @todo 10. 给每个数组/对象都增加 dep 收集功能，这样就可以通过 xxx.__ob__.dep.notify() 手动触发 watcher 更新了 即 vm.$set 原理\r\n * @todo 11. 递归收集\r\n */\r\n\r\nimport { newArrayProto } from './array'\r\nimport Dep from './dep'\r\n\r\nclass Observer {\r\n  constructor(data) {\r\n    // 给每个数组/对象都增加 dep 收集功能\r\n    // 对于数组来说，[1, 2, [3, 4, 5], {a: 6}]，其成员中的数组和对象本身是没有被劫持过的\r\n    // 对于对象来说，{list: [1, 2, 3], info:{a: 4, b: 5}}，其属性中的数组和对象本身虽然其实被劫持过了。但是必须引用改变，才可以触发setter，更新 watcher。在外部无法调用这个 dep 收集器的相关方法去更新 watcher\r\n    // 如果想要在数组新增成员或者对象新增属性后，也可以更新 watcher，必须在给数组/对象本身增加 dep 收集器，这样就可以通过 xxx.__ob__.dep.notify() 手动触发 watcher 了\r\n    this.dep = new Dep()\r\n\r\n    // data.__ob__ = this // 给数据加了一个标识 如果数据上有__ob__ 则说明这个属性被观测过了\r\n    Object.defineProperty(data, '__ob__', {\r\n      value: this,\r\n      enumerable: false, // 将__ob__ 变成不可枚举 （循环的时候无法获取到，防止栈溢出）\r\n    })\r\n\r\n    if (Array.isArray(data)) {\r\n      // 这里我们可以重写可以修改数组本身的方法 7个方法，切片编程：需要保留数组原有的特性，并且可以重写部分方法\r\n      data.__proto__ = newArrayProto\r\n      this.observeArray(data) // 如果数组中放的是对象 可以监控到对象的变化\r\n    } else {\r\n      this.walk(data)\r\n    }\r\n  }\r\n\r\n  // 循环对象\"重新定义属性\",对属性依次劫持，性能差\r\n  // \"重新定义属性\"，个人理解，和proxy类似，对象和proxy返回的代理对象并不全等，其引用不同；\r\n  // 入参属性为data[key]，使用defineProperty劫持之后，其属性变为响应式属性，和之前的普通属性断开了关联，可以理解为重新定义了属性\r\n  // 换句话来说，data[key]仅仅是给其对应的响应式属性提供了一个默认值，无任何关联\r\n  // 如果不传入默认值，而是在getter、setter中访问 data[key]，则会出现栈溢出的现象   getter -> data.name -> getter -> data.name ->...无限循环\r\n  walk(data) {\r\n    Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n  }\r\n\r\n  // 观测数组\r\n  observeArray(data) {\r\n    data.forEach(item => observe(item))\r\n  }\r\n}\r\n\r\n// 深层次嵌套会递归，递归多了性能差，不存在属性监控不到，存在的属性要重写方法  vue3-> proxy\r\nfunction dependArray(value) {\r\n  for (let i = 0; i < value.length; i++) {\r\n    let current = value[i]\r\n    current.__ob__ && current.__ob__.dep.depend()\r\n    if (Array.isArray(current)) {\r\n      dependArray(current)\r\n    }\r\n  }\r\n}\r\n\r\n// 使用defineProperty API进行属性劫持\r\nexport function defineReactive(target, key, value) {\r\n  // 深度属性劫持，对所有的数组/对象都进行属性劫持，childOb.dep 用来收集依赖的\r\n  let childOb = observe(value)\r\n\r\n  let dep = new Dep() // 每一个属性都有一个 dep\r\n\r\n  // Object.defineProperty只能劫持已经存在的属性，新增属性无法劫持 （vue里面会为此单独写一些语法糖  $set $delete）\r\n  Object.defineProperty(target, key, {\r\n    // 取值的时候 会执行get\r\n    get() {\r\n      // 保证了只有在模版渲染阶段的取值操作才会进行依赖收集\r\n      if (Dep.target) {\r\n        console.log('>>>>>get', key)\r\n        dep.depend() // 让当前的watcher 记住这个 dep；同时让这个属性的 dep 记住当前的 watcher\r\n        if (childOb) {\r\n          childOb.dep.depend() // 让数组/对象本身也实现依赖收集，$set原理\r\n          if (Array.isArray(value)) {\r\n            dependArray(value)\r\n          }\r\n        }\r\n      }\r\n      return value\r\n    },\r\n    // 修改的时候 会执行set\r\n    set(newValue) {\r\n      if (newValue === value) return\r\n\r\n      // 修改属性之后重新观测，目的：新值为对象或数组的话，可以劫持其数据\r\n      observe(newValue)\r\n      value = newValue\r\n\r\n      console.log('dep', dep)\r\n      // 通知 watcher 更新\r\n      dep.notify()\r\n    },\r\n  })\r\n}\r\n\r\n// 数据观测\r\nexport function observe(data) {\r\n  // 只对对象进行劫持\r\n  if (typeof data !== 'object' || data == null) {\r\n    return\r\n  }\r\n\r\n  // 如果一个对象被劫持过了，那就不需要再被劫持了 (要判断一个对象是否被劫持过，可以在对象上增添一个实例，用实例的原型链来判断是否被劫持过)\r\n  if (data.__ob__ instanceof Observer) {\r\n    return data.__ob__\r\n  }\r\n\r\n  return new Observer(data)\r\n}\r\n","/**\r\n * @name Vue初始化状态、初始化数据\r\n * @todo 1. 对data进行劫持，并将data挂载到vm上 vm._data = data\r\n * @todo 2. 循环data，将vm._data用vm来代理\r\n */\r\n\r\nimport { observe } from './observe/index'\r\n\r\n// 初始化状态\r\nexport function initState(vm) {\r\n  const opts = vm.$options // 获取所有的选项\r\n  if (opts.data) {\r\n    initData(vm) // 初始化数据\r\n  }\r\n}\r\n\r\nfunction proxy(vm, target, key) {\r\n  Object.defineProperty(vm, key, {\r\n    // vm.name\r\n    get() {\r\n      return vm[target][key] // vm._data.name\r\n    },\r\n    set(newValue) {\r\n      vm[target][key] = newValue\r\n    },\r\n  })\r\n}\r\n\r\n\r\n// 初始化数据\r\nfunction initData(vm) {\r\n  let data = vm.$options.data // data可能是函数和对象\r\n  data = typeof data === 'function' ? data.call(vm) : data\r\n\r\n  vm._data = data // 我将返回的对象放到了_data上\r\n\r\n  // vue2采用 defineProperty API，对data进行劫持\r\n  observe(data)\r\n\r\n  // 将vm._data 用 vm来代理 ，访问 vm.name = vm._data.name\r\n  for (let key in data) {\r\n    if(key === '_data') return\r\n\r\n    proxy(vm, '_data', key)\r\n  }\r\n}\r\n","/**\r\n * @name 给Vue扩展初始化方法\r\n */\r\n\r\nimport { compileToFunction } from './compiler'\r\nimport { mountComponent } from './lifecycle'\r\nimport { initState } from './state'\r\n\r\n// 就是给Vue增加init方法的\r\nexport function initMixin(Vue) {\r\n  // 用于初始化操作\r\n  Vue.prototype._init = function (options) {\r\n    // vm.$options 就是获取用户的配置\r\n    const vm = this\r\n    vm.$options = options // 将用户的选项挂载到实例上\r\n\r\n    // 初始化状态\r\n    initState(vm)\r\n\r\n    if (options.el) {\r\n      vm.$mount(options.el) // 实现数据的挂载\r\n    }\r\n  }\r\n  Vue.prototype.$mount = function (el) {\r\n    const vm = this\r\n    el = document.querySelector(el)\r\n    let ops = vm.$options\r\n\r\n    // 没有render函数\r\n    if (!ops.render) {\r\n      let template\r\n      // 没有render函数，看一下是否写了tempate, 没写template则采用外部的template\r\n      if (ops.template && el) {\r\n        template = ops.template\r\n      } else if (!ops.template && el) {\r\n        template = el.outerHTML\r\n      }\r\n      if (template && el) {\r\n        // 这里需要对模板进行编译\r\n        const render = compileToFunction(template)\r\n        ops.render = render // 最终会被编译成 h('xxx')\r\n      }\r\n    }\r\n    mountComponent(vm, el) // 组件的挂载\r\n\r\n    // script 标签引用的 vue.global.js 这个编译过程是在浏览器运行的\r\n    // runtime是不包含模板编译的, 整个编译是打包的时候通过loader来转义.vue文件的, 用runtime的时候不能使用template\r\n  }\r\n}\r\n","/**\r\n * @name 实现Vue构造函数\r\n */\r\n\r\nimport { initMixin } from './init'\r\nimport { initLifeCycle } from './lifecycle'\r\nimport { nextTick } from \"./observe/watcher\";\r\n\r\n// 通过构造函数扩展方法\r\nfunction Vue(options) {\r\n  // options就是用户的选项\r\n  this._init(options) // 默认就调用了init\r\n}\r\n\r\nVue.prototype.$nextTick = nextTick // 把 nextTick 挂载到vue原型上，方便用户在实例上使用\r\ninitMixin(Vue) // 在Vue原型上扩展init方法\r\ninitLifeCycle(Vue) // 在Vue原型上扩展 render 函数相关的方法\r\n\r\nexport default Vue\r\n"],"names":["ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","parent","children","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","i","obj","split","forEach","item","key","trim","JSON","stringify","slice","defaultTagRE","gen","codegen","test","tokens","lastIndex","exec","index","join","genChildren","map","child","ast","code","compileToFunction","template","console","log","render","Function","id","Dep","constructor","subs","depend","target","addDep","addSub","watcher","notify","update","Watcher","vm","fn","getter","deps","depsId","Set","get","dep","has","add","queueWatcher","run","queue","pending","flushSchedulerQueue","flushQueue","q","nextTick","callbacks","waiting","flushCallbacks","cbs","cb","Promise","resolve","then","createElementVNode","data","vnode","createTextVNode","undefined","createElm","el","document","createElement","patchProps","appendChild","createTextNode","props","styleName","style","setAttribute","patch","oldVNode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","initLifeCycle","Vue","prototype","_c","arguments","_v","_s","_render","$options","call","_update","$el","mountComponent","updateComponent","oldArrayProto","Array","newArrayProto","Object","create","methods","method","args","result","inserted","ob","__ob__","observeArray","Observer","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","observe","dependArray","current","childOb","set","newValue","initState","opts","initData","proxy","_data","initMixin","_init","options","$mount","querySelector","ops","outerHTML","$nextTick"],"mappings":"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"}