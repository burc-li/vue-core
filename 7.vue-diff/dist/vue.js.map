{"version":3,"file":"vue.js","sources":["../src/compiler/parse.js","../src/compiler/index.js","../src/observe/dep.js","../src/util/next-tick.js","../src/observe/scheduler.js","../src/observe/watcher.js","../src/vdom/index.js","../src/vdom/patch.js","../src/lifecycle.js","../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/utils.js","../src/init.js","../src/gloablAPI.js","../src/examples/diff.js","../src/index.js"],"sourcesContent":["/**\r\n * @name 正则表达式，用于匹配开始标签、结束标签、属性\r\n * @returns\r\n */\r\n\r\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*`\r\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})`\r\n// 匹配的是 <xxx  第一个分组就是开始标签的名字\r\nconst startTagOpen = new RegExp(`^<${qnameCapture}`)\r\n// 匹配的是 </xxxx>  第一个分组就是结束标签的名字\r\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`)\r\n// 分组1: 属性的key 分组2: =  分组3/分组4/分组5: value值\r\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/ // 匹配属性\r\nconst startTagClose = /^\\s*(\\/?)>/ // 匹配开始标签的结束 > 或 />  <div id = 'app' >  <br/>\r\n\r\n/**\r\n * @name 对模板进行编译处理\r\n * @desc 循环遍历html字符串，利用正则表达式对其进行匹配【开始标签、属性、开始标签的闭合标签、文本、结束标签】，\r\n * @desc 利用 start chars end 方法去处理开始标签、文本、结束标签\r\n * @desc 利用栈型结构，构造一颗AST语法树，匹配到开始标签就入栈，匹配到结束标签就出栈\r\n */\r\n// 对模板进行编译处理\r\nexport function parseHTML(html) {\r\n  const ELEMENT_TYPE = 1 // 元素类型\r\n  const TEXT_TYPE = 3 // 文本类型\r\n  const stack = [] // 用于存放元素的栈\r\n  let currentParent // 指向的是栈中的最后一个\r\n  let root\r\n\r\n  // 最终需要转化成一颗抽象语法树\r\n  function createASTElement(tag, attrs) {\r\n    return {\r\n      tag, // 标签名\r\n      type: ELEMENT_TYPE, // 类型\r\n      attrs, // 属性\r\n      parent: null,\r\n      children: [],\r\n    }\r\n  }\r\n\r\n  // 处理开始标签，利用栈型结构 来构造一颗树\r\n  function start(tag, attrs) {\r\n    let node = createASTElement(tag, attrs) // 创造一个 ast节点\r\n    if (!root) {\r\n      root = node // 如果root为空，则当前是树的根节点\r\n    }\r\n    if (currentParent) {\r\n      node.parent = currentParent // 只赋予了parent属性\r\n      currentParent.children.push(node) // 还需要让父亲记住自己\r\n    }\r\n    stack.push(node)\r\n    currentParent = node // currentParent为栈中的最后一个\r\n  }\r\n\r\n  // 处理文本\r\n  function chars(text) {\r\n    text = text.replace(/\\s/g, '')\r\n    // 文本直接放到当前指向的节点中\r\n    if (text) {\r\n      currentParent.children.push({\r\n        type: TEXT_TYPE,\r\n        text,\r\n        parent: currentParent,\r\n      })\r\n    }\r\n  }\r\n\r\n  // 处理结束标签\r\n  function end(tag) {\r\n    stack.pop() // 弹出栈中最后一个ast节点\\\r\n    currentParent = stack[stack.length - 1]\r\n  }\r\n\r\n  // 剔除 template 已匹配的内容\r\n  function advance(n) {\r\n    html = html.substring(n)\r\n  }\r\n\r\n  // 解析开始标签\r\n  function parseStartTag() {\r\n    const start = html.match(startTagOpen)\r\n    if (start) {\r\n      const match = {\r\n        tagName: start[1], // 标签名\r\n        attrs: [],\r\n      }\r\n      advance(start[0].length)\r\n\r\n      let attr, end\r\n      // 如果不是开始标签的结束 就一直匹配下去\r\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\r\n        advance(attr[0].length)\r\n        match.attrs.push({ name: attr[1], value: attr[3] || attr[4] || attr[5] || true })\r\n      }\r\n\r\n      // 如果不是开始标签的结束\r\n      if (end) {\r\n        advance(end[0].length)\r\n      }\r\n      return match\r\n    }\r\n    return false\r\n  }\r\n\r\n  while (html) {\r\n    // 如果textEnd = 0 说明是一个开始标签或者结束标签\r\n    // 如果textEnd > 0 说明就是文本的结束位置\r\n    let textEnd = html.indexOf('<')\r\n    if (textEnd == 0) {\r\n      // 开始标签的解析結果，包括 标签名 和 属性\r\n      const startTagMatch = parseStartTag()\r\n\r\n      if (startTagMatch) {\r\n        start(startTagMatch.tagName, startTagMatch.attrs)\r\n        continue\r\n      }\r\n\r\n      // 匹配结束标签\r\n      let endTagMatch = html.match(endTag)\r\n      if (endTagMatch) {\r\n        advance(endTagMatch[0].length)\r\n        end(endTagMatch[1])\r\n        continue\r\n      }\r\n    }\r\n    if (textEnd > 0) {\r\n      let text = html.substring(0, textEnd) // 截取文本内容\r\n      if (text) {\r\n        chars(text)\r\n        advance(text.length)\r\n      }\r\n    }\r\n  }\r\n\r\n  return root\r\n}\r\n","import { parseHTML } from './parse'\r\n\r\n// 根据ast语法树的 attrs属性对象 生成相对应的属性字符串\r\nfunction genProps(attrs) {\r\n  let str = ''\r\n  for (let i = 0; i < attrs.length; i++) {\r\n    let attr = attrs[i]\r\n    if (attr.name === 'style') {\r\n      // color:red;background:red => {color:'red',background:red}\r\n      let obj = {}\r\n      // 可以使用 qs 库\r\n      attr.value.split(';').forEach(item => {\r\n        let [key, value] = item.split(':')\r\n        obj[key.trim()] = value.trim()\r\n      })\r\n      attr.value = obj\r\n    }\r\n    str += `${attr.name}:${JSON.stringify(attr.value)},` // id:'app',class:'app-inner',\r\n  }\r\n  return `{${str.slice(0, -1)}}`\r\n}\r\n\r\nconst defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g // 匹配到的内容就是我们表达式的变量，例如 {{ name }}\r\nfunction gen(node) {\r\n  if (node.type === 1) {\r\n    // 元素\r\n    return codegen(node)\r\n  } else {\r\n    // 文本\r\n    let text = node.text\r\n    if (!defaultTagRE.test(text)) {\r\n      // _v('hello')\r\n      return `_v(${JSON.stringify(text)})`\r\n    } else {\r\n      //_v( _s(name) + 'hello' + _s(age))\r\n      let tokens = []\r\n      let match\r\n      defaultTagRE.lastIndex = 0\r\n      let lastIndex = 0\r\n      while ((match = defaultTagRE.exec(text))) {\r\n        let index = match.index // 匹配项的第一个字符在字符串中的位置  {{name}} hello  {{age}} word\r\n        if (index > lastIndex) {\r\n          tokens.push(JSON.stringify(text.slice(lastIndex, index)))\r\n        }\r\n        tokens.push(`_s(${match[1].trim()})`)\r\n        lastIndex = index + match[0].length\r\n      }\r\n      if (lastIndex < text.length) {\r\n        tokens.push(JSON.stringify(text.slice(lastIndex)))\r\n      }\r\n      return `_v(${tokens.join('+')})`\r\n    }\r\n  }\r\n}\r\n\r\n// 根据ast语法树的 children对象 生成相对应的 children字符串\r\nfunction genChildren(children) {\r\n  return children.map(child => gen(child)).join(',')\r\n}\r\n\r\n/**\r\n * @name 代码生成\r\n * @desc 生成指定格式的render方法代码字符串，再利用模版引擎生成render函数\r\n * @desc 我们会在Vue原型上扩展 render 函数相关的方法， _c _s _v\r\n * @desc _c: 创建节点虚拟节点VNode    _v: 创建文本虚拟节点VNode   _s: 处理变量\r\n */\r\nfunction codegen(ast) {\r\n  let children = genChildren(ast.children)\r\n  let code = `_c('${ast.tag}',${ast.attrs.length > 0 ? genProps(ast.attrs) : 'null'}${ast.children.length ? `,${children}` : ''})`\r\n\r\n  return code\r\n}\r\n\r\nexport function compileToFunction(template) {\r\n  console.log('html模版字符串：\\n', template)\r\n\r\n  // 1.就是将 template 转化成 ast 语法树\r\n  let ast = parseHTML(template)\r\n  console.log('AST语法树：\\n', ast)\r\n\r\n  // 2.生成render方法代码字符串 (render方法执行后的返回的结果就是 虚拟DOM)\r\n  let code = codegen(ast)\r\n  console.log('代码串：\\n', code)\r\n\r\n  // 模板引擎的实现原理就是 with + new Function\r\n  code = `with(this){return ${code}}`\r\n\r\n  let render = new Function(code) // 根据代码生成render函数\r\n  console.log('render：\\n', render)\r\n\r\n  return render\r\n}\r\n\r\n//  html模版字符串\r\n// <div id=\"app\" style=\"color: red; background: yellow\">\r\n//   hello {{ name }} world\r\n//   <span></span>\r\n// </div>\r\n\r\n// 转换为 AST语法树\r\n// {\r\n//   tag: 'div',\r\n//   type: 1,\r\n//   attrs: [\r\n//     { name: 'id', value: 'app' },\r\n//     { name: 'style', value: { color: 'red', background: 'yellow' } },\r\n//   ],\r\n//   parent: null,\r\n//   children: [\r\n//     { text: 'hello{{name}}world', type: 3, parent: {...} },\r\n//     { tag: 'span', type: 1, attrs: [], children: [], parent: {...} },\r\n//   ],\r\n// }\r\n\r\n// 将 AST语法树 转化成 render代码字符串\r\n// _c: 创建节点虚拟节点VNode    _v: 创建文本虚拟节点VNode   _s: 处理变量\r\n// `_c('div',{id:\"app\",style:{\"color\":\"red\",\" background\":\"yellow\"}},_v(\"hello\"+_s(name)+\"world\"),_c('span',null))`\r\n// 利用模版引擎转换成可执行的render函数\r\n// ƒ anonymous(\r\n//   ) {\r\n//     with(this){\r\n//       return _c('div',{id:\"app\",style:{\"color\":\"red\",\"background\":\"yellow\"}},\r\n//                 _v(\"hello\"+_s(name)+\"world\"),\r\n//                 _c('span',null))}\r\n//   }","/**\r\n * @name Dep收集器\r\n * @decs 每个响应式属性有一个 dep 收集器（属性就是被观察者，watcher就是观察者），属性变化了会通知观察者来更新 -》 这就是我们的观察者模式\r\n * @decs 需要给每个响应式属性增加一个 dep， 目的就是收集watcher，当响应式数据发生变化时，更新收集的所有 watcher\r\n * @todo 1. dep 和 watcher 是一个多对多的关系\r\n * @todo 2. 一个属性可以在多个组件中使用 （一个 dep 对应多个 watcher）\r\n * @todo 3. 一个组件中由多个属性组成 （一个 watcher 对应多个 dep）\r\n * @split 计算属性---------\r\n * @todo 1. pushTarget\r\n * @todo 2. popTarget\r\n */\r\n\r\nlet id = 0\r\n\r\nclass Dep {\r\n  constructor() {\r\n    this.id = id++\r\n    // 依赖收集，收集当前属性对应的观察者 watcher\r\n    this.subs = []\r\n  }\r\n  // 通知 watcher 收集 dep\r\n  depend() {\r\n    Dep.target.addDep(this)\r\n  }\r\n  // 让当前的 dep收集 watcher\r\n  addSub(watcher) {\r\n    this.subs.push(watcher)\r\n  }\r\n  // 通知当前 dep关联的所有 watcher 去更新\r\n  notify() {\r\n    this.subs.forEach(watcher => watcher.update())\r\n  }\r\n}\r\n\r\n// 当前渲染的 watcher，静态变量，类似于全局变量，只有一份\r\nDep.target = null\r\n\r\n// 存放 watcher 的栈， 目的：用于洋葱模型中，计算属性watcher 订阅的dep去收集上层watcher（可能是计算属性watcher，也可能是渲染watcher)\r\nlet stack = []\r\n// 当前 watcher 入栈， Dep.target 指向 当前 watcher\r\nexport function pushTarget(watcher) {\r\n  stack.push(watcher)\r\n  Dep.target = watcher\r\n}\r\n// 栈中最后一个 watcher 出栈，Dep.target指向栈中 最后一个 watcher，若栈为空，则为 undefined\r\nexport function popTarget() {\r\n  stack.pop()\r\n  Dep.target = stack[stack.length - 1]\r\n}\r\n\r\nexport default Dep\r\n","/** 实现暴露给用户API回调的异步更新 - nextTick */\r\nlet callbacks = [] // 存储 nextTick 回调\r\nlet waiting = false // 防抖\r\n\r\nfunction flushCallbacks() {\r\n  let cbs = callbacks.slice(0)\r\n  waiting = false\r\n  callbacks = []\r\n  cbs.forEach(cb => cb()) // 按照顺序依次执行\r\n}\r\n\r\n// vue2中 nextTick 没有直接使用某个api 而是采用优雅降级的方式\r\n// 内部先采用的是 promise(IE不兼容，微任务)  MutationObserver(H5的api，微任务)  setImmediate(IE专享，宏任务)  setTimeout（宏任务)\r\nlet timerFunc;\r\nif (Promise) {\r\n    timerFunc = () => {\r\n        Promise.resolve().then(flushCallbacks)\r\n    }\r\n}else if(MutationObserver){\r\n    let observer = new MutationObserver(flushCallbacks); // 这里传入的回调是异步执行的\r\n    let textNode = document.createTextNode(1);\r\n    observer.observe(textNode,{\r\n        characterData:true\r\n    });\r\n    timerFunc = () => {\r\n        textNode.textContent = 2;\r\n    }\r\n}else if(setImmediate){\r\n    timerFunc = () => {\r\n       setImmediate(flushCallbacks);\r\n    }\r\n}else{\r\n    timerFunc = () => {\r\n        setTimeout(flushCallbacks);\r\n     }\r\n}\r\n\r\nexport function nextTick(cb) {\r\n  // 先内部还是先用户的？按照顺序依次执行\r\n  callbacks.push(cb) // 维护 nextTick 中的 cakllback 方法\r\n  if (!waiting) {\r\n    timerFunc()\r\n    waiting = true\r\n  }\r\n}","import { nextTick } from '../util/next-tick'\r\n\r\n/** 实现内部 watcher 异步更新 - nextTick */\r\nlet queue = []\r\nlet has = {}\r\nlet pending = false // 防抖\r\n\r\nfunction flushSchedulerQueue() {\r\n  let flushQueue = queue.slice(0)\r\n  queue = []\r\n  has = {}\r\n  pending = false\r\n  flushQueue.forEach(q => q.run()) // 在刷新的过程中可能还有新的 watcher，重新放到 queue 中\r\n}\r\n\r\nexport function queueWatcher(watcher) {\r\n  const id = watcher.id\r\n  if (!has[id]) {\r\n    queue.push(watcher)\r\n    has[id] = true\r\n    // 不管我们的 update 执行多少次 ，但是最终只执行一轮刷新操作\r\n    if (!pending) {\r\n      nextTick(flushSchedulerQueue)\r\n      pending = true\r\n    }\r\n  }\r\n}","/**\r\n * @name Watcher\r\n * @decs 每个响应式属性有一个dep 收集器（属性就是被观察者，watcher就是观察者），属性变化了会通知观察者来更新 -》 这就是我们的观察者模式\r\n * @decs 不同组件有不同的 watcher，目前我们只有一个渲染根实例的 watcher\r\n * @todo 1. 当我们创建渲染 watcher 的时候，我们会把当前的渲染 watcher 放到 Dep.target 上\r\n * @todo 2. 调用_render() 会取值，走到 getter 上，调用 dep.depend() 进行双向依赖收集操作\r\n * @split 计算属性watcher---------\r\n * @todo 1. lazy：懒的，不会立即执行get方法\r\n * @todo 2. dirty：脏的，决定重新读取get返回值 还是 读取缓存值\r\n * @todo 3. value：存储 get返回值\r\n * @todo 4. evaluate 计算属性watcher为脏时，执行 evaluate，并将其标识为干净的\r\n * @todo 5. depend 用于洋葱模型中计算属性watcher订阅的dep 去depend收集上层watcher 即Dep.target（可能是计算属性watcher，也可能是渲染watcher)\r\n * @split 监听器watcher---------\r\n * @todo 1. user：用户watcher，即监听器watcher\r\n * @todo 2. deep：深度监听，若为深度监听，则在 get 方法中递归取值，让每一个子属性都收集监听器watcher\r\n * @todo 3. cb：监听器回调\r\n * @todo 4. 在 queueWatcher 内部执行 run 方法时，如果是 用户watcher，则执行监听器cb回调方法\r\n */\r\n\r\nimport { popTarget, pushTarget } from './dep'\r\nimport { queueWatcher } from './scheduler'\r\n\r\nlet id = 0\r\n\r\nclass Watcher {\r\n  constructor(vm, exprOrFn, options, cb) {\r\n    this.id = id++\r\n    \r\n    if (typeof exprOrFn === 'string') {\r\n      this.getter = function () {\r\n        return vm[exprOrFn]\r\n      }\r\n    } else {\r\n      this.getter = exprOrFn // getter意味着调用这个函数可以发生取值操作\r\n    }\r\n\r\n    this.deps = [] // 存储订阅dep，用于后续我们实现计算属性洋葱模型，和一些清理工作\r\n    this.depsId = new Set() // 用于去重\r\n\r\n    // 计算属性watcher 用到的属性\r\n    this.vm = vm\r\n    this.lazy = options.lazy // 懒的，不会立即执行get方法\r\n    this.dirty = this.lazy // 脏的，决定重新读取get返回值 还是 读取缓存值\r\n\r\n    // 监听器watcher 用到的属性\r\n    this.user = options.user // 标识是否是用户自己的watcher\r\n    this.deep = options.deep\r\n    this.cb = cb\r\n\r\n    this.value = this.lazy ? undefined : this.get() // 存储 get返回值\r\n  }\r\n  // 订阅 dep，并通知 dep 收集 watcher\r\n  addDep(dep) {\r\n    // 一个组件 对应 多个属性 重复的属性不用记录，去重操作\r\n    let id = dep.id\r\n    if (!this.depsId.has(id)) {\r\n      this.deps.push(dep)\r\n      this.depsId.add(id)\r\n      dep.addSub(this) // watcher已经记住了dep，而且已经去重了，此时让 dep 也记住 watcher\r\n    }\r\n  }\r\n  get() {\r\n    pushTarget(this) // Dep.target 是一个静态属性\r\n    // 执行vm._render时，去vm上取 name 和 age。vm._render -> vm.$options.render.call(vm) -> with(this){} -> _s(name) -> 就会去作用域链 即this 上取 name\r\n    // JavaScript 查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的 context 或者包含这个变量的函数有关。'with'语句将某个对象添加到作用域链的顶部，如果在 statement 中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值\r\n    let value = this.getter.call(this.vm) // 会去vm上取值  vm._update(vm._render) 取name 和age\r\n\r\n    // 深度监听\r\n    this.deep && JSON.stringify(value)\r\n\r\n    popTarget() // 渲染完毕后就清空，保证了只有在模版渲染阶段的取值操作才会进行依赖收集\r\n    return value\r\n  }\r\n  // 重新渲染\r\n  update() {\r\n    console.log('watcher-update')\r\n    if (this.lazy) {\r\n      // 计算属性依赖的值发生改变，触发 setter 通知 watcher 更新，将计算属性watcher 标识为脏值即可\r\n      // 后面还会触发渲染watcher，会走 evaluate 重新读取返回值\r\n      this.dirty = true\r\n    } else {\r\n      queueWatcher(this) // 把当前的watcher 暂存起来，异步队列渲染，最终执行 run 方法\r\n      // this.get(); // 重新渲染\r\n    }\r\n  }\r\n\r\n  // queueWatcher 内部执行 run 方法\r\n  run() {\r\n    let oldValue = this.value\r\n    let newValue = (this.value = this.get()) // 渲染的时候用的是最新的vm来渲染的，需要重新赋值啊！！！！！\r\n    if (this.user) {\r\n      this.cb.call(this.vm, newValue, oldValue)\r\n    }\r\n  }\r\n\r\n  // 计算属性watcher为脏时，执行 evaluate，并将其标识为干净的\r\n  evaluate() {\r\n    this.value = this.get() // 重新获取到用户函数的返回值\r\n    this.dirty = false\r\n  }\r\n  // 用于洋葱模型中计算属性watcher 订阅的dep去 depend收集上层watcher 即Dep.target（可能是计算属性watcher，也可能是渲染watcher)\r\n  depend() {\r\n    let i = this.deps.length\r\n    while (i--) {\r\n      this.deps[i].depend()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Watcher\r\n","/**\r\n * @name 虚拟DOM相关方法\r\n */\r\n\r\n// h()  _c() 创建元素的虚拟节点\r\nexport function createElementVNode(vm, tag, data, ...children) {\r\n  if (data == null) {\r\n    data = {}\r\n  }\r\n  let key = data.key\r\n  if (key) {\r\n    delete data.key\r\n  }\r\n  return vnode(vm, tag, key, data, children)\r\n}\r\n\r\n// _v() 创建文本虚拟节点\r\nexport function createTextVNode(vm, text) {\r\n  return vnode(vm, undefined, undefined, undefined, undefined, text)\r\n}\r\n\r\n// VNode 和 AST一样吗？ AST做的是语法层面的转化，他描述的是语法本身 (可以描述 js css html)\r\n// 我们的VNode 是描述的dom元素，可以增加一些自定义属性\r\nfunction vnode(vm, tag, key, data, children, text) {\r\n  return {\r\n    vm,\r\n    tag,\r\n    key,\r\n    data,\r\n    children,\r\n    text,\r\n    // ....\r\n  }\r\n}\r\n\r\n// 判断是否是相同节点 tag标签名相同 && key相同\r\nexport function isSameVnode(vnode1, vnode2) {\r\n  return vnode1.tag === vnode2.tag && vnode1.key === vnode2.key\r\n}\r\n","/**\r\n * @name patch比对 - 核心就是diff算法\r\n * @desc diff算法是一个平级比较的过程，父亲和父亲比对，儿子和儿子比对\r\n * @todo 1、新老节点不相同（判断节点的tag和节点的key），直接用新节点替换老节点，无需比对\r\n * @todo 2、两个节点是同一个节点 (判断节点的tag和节点的key) ，比较两个节点的属性是否有差异（复用老的节点，将差异的属性更新）\r\n * @todo 3、节点比较完毕后，,需要比较两个节点的儿子\r\n * @todo 3.1、新节点有孩子，老节点没有孩子，挂载\r\n * @todo 3.2、老节点有孩子，新节点没有孩子，删除\r\n * @todo 3.3、新老节点都有孩子 - diff核心算法\r\n */\r\nimport { isSameVnode } from './index'\r\n\r\n// 利用vnode创建真实元素\r\nexport function createElm(vnode) {\r\n  let { tag, data, children, text } = vnode\r\n  if (typeof tag === 'string') {\r\n    // 标签\r\n    vnode.el = document.createElement(tag) // 这里将真实节点和虚拟节点对应起来，后续如果修改属性了\r\n    patchProps(vnode.el, {}, data)\r\n    children.forEach(child => {\r\n      vnode.el.appendChild(createElm(child))\r\n    })\r\n  } else {\r\n    // 文本\r\n    vnode.el = document.createTextNode(text)\r\n  }\r\n  return vnode.el\r\n}\r\n\r\n// 对比属性打补丁\r\nexport function patchProps(el, oldProps = {}, props = {}) {\r\n  // 老的属性中有，新的没有  要删除老的\r\n  let oldStyles = oldProps.style || {}\r\n  let newStyles = props.style || {}\r\n\r\n  for (let key in oldStyles) {\r\n    // 老的样式中有，新的没有，则删除\r\n    if (!newStyles[key]) {\r\n      el.style[key] = ''\r\n    }\r\n  }\r\n  for (let key in oldProps) {\r\n    // 老的属性中有，新的没有，则删除\r\n    if (!props[key]) {\r\n      el.removeAttribute(key)\r\n    }\r\n  }\r\n\r\n  for (let key in props) {\r\n    if (key === 'style') {\r\n      // { color: 'red', \"background\": 'yellow' }\r\n      for (let styleName in props.style) {\r\n        el.style[styleName] = props.style[styleName]\r\n      }\r\n    } else {\r\n      el.setAttribute(key, props[key])\r\n    }\r\n  }\r\n}\r\n\r\n// patch既有初始化元素的功能 ，又有更新元素的功能\r\nexport function patch(oldVNode, vnode) {\r\n  // 写的是初渲染流程\r\n  const isRealElement = oldVNode.nodeType\r\n  if (isRealElement) {\r\n    const elm = oldVNode // 获取真实元素\r\n    const parentElm = elm.parentNode // 拿到父元素\r\n    let newElm = createElm(vnode)\r\n    console.log('利用vnode创建真实元素\\n', newElm, parentElm)\r\n\r\n    parentElm.insertBefore(newElm, elm.nextSibling)\r\n    parentElm.removeChild(elm) // 删除老节点\r\n\r\n    return newElm\r\n  } else {\r\n    // diff 算法\r\n    return patchVnode(oldVNode, vnode)\r\n  }\r\n}\r\n\r\nfunction patchVnode(oldVNode, vnode) {\r\n  // 1. 新老节点不相同（判断节点的tag和节点的key），直接用新节点替换老节点，无需比对\r\n  if (!isSameVnode(oldVNode, vnode)) {\r\n    let el = createElm(vnode)\r\n    oldVNode.el.parentNode.replaceChild(el, oldVNode.el)\r\n    return el\r\n  }\r\n  let el = (vnode.el = oldVNode.el)\r\n\r\n  // 2. 新老节点相同，且是文本 (判断节点的tag和节点的key)，比较文本内容\r\n  if (!oldVNode.tag) {\r\n    if (oldVNode.text !== vnode.text) {\r\n      el.textContent = vnode.text // 用新的文本覆盖掉老的\r\n    }\r\n  }\r\n\r\n  // 3. 新老节点相同，且是标签 (判断节点的tag和节点的key)\r\n  // 3.1 比较标签属性\r\n  patchProps(el, oldVNode.data, vnode.data)\r\n\r\n  let oldChildren = oldVNode.children || []\r\n  let newChildren = vnode.children || []\r\n  // 3.2 比较两个节点的儿子\r\n  // 3.2.1 新老节点都有儿子\r\n  if (oldChildren.length > 0 && newChildren.length > 0) {\r\n    // diff算法核心！！！\r\n    updateChildren(el, oldChildren, newChildren)\r\n  }\r\n  // 3.2.2 新节点有儿子，老节点没有儿子，挂载\r\n  else if (newChildren.length > 0) {\r\n    mountChildren(el, newChildren)\r\n  }\r\n  // 3.2.3 老节点有儿子，新节点没有儿子，删除\r\n  else if (oldChildren.length > 0) {\r\n    el.innerHTML = ''\r\n  }\r\n}\r\n\r\n// 挂载孩子\r\nfunction mountChildren(el, newChildren) {\r\n  for (let i = 0; i < newChildren.length; i++) {\r\n    let child = newChildren[i]\r\n    el.appendChild(createElm(child))\r\n  }\r\n}\r\n\r\n// diff - 核心\r\nfunction updateChildren(el, oldChildren, newChildren) {\r\n  let oldStartIndex = 0\r\n  let newStartIndex = 0\r\n  let oldEndIndex = oldChildren.length - 1\r\n  let newEndIndex = newChildren.length - 1\r\n\r\n  let oldStartVnode = oldChildren[0]\r\n  let newStartVnode = newChildren[0]\r\n\r\n  let oldEndVnode = oldChildren[oldEndIndex]\r\n  let newEndVnode = newChildren[newEndIndex]\r\n\r\n  // 双方有一方头指针大于尾部指针，则停止循环\r\n  while (oldStartIndex <= oldEndIndex && newStartIndex <= newEndIndex) {\r\n    // 从头部开始比对\r\n    if (isSameVnode(oldStartVnode, newStartVnode)) {\r\n      patchVnode(oldStartVnode, newStartVnode) // 如果是相同节点 则递归比较子节点\r\n      oldStartVnode = oldChildren[++oldStartIndex]\r\n      newStartVnode = newChildren[++newStartIndex]\r\n    }\r\n    // 从尾部开始比对\r\n    else if (isSameVnode(oldEndVnode, newEndVnode)) {\r\n      patchVnode(oldEndVnode, newEndVnode) // 如果是相同节点 则递归比较子节点\r\n      oldEndVnode = oldChildren[--oldEndIndex]\r\n      newEndVnode = newChildren[--newEndIndex]\r\n    }\r\n  }\r\n\r\n  // 1. 同序列尾部挂载，向后追加\r\n  // a b c d\r\n  // a b c d e f\r\n  // 2. 同序列头部挂载，向前追加\r\n  //     a b c d\r\n  // e f a b c d\r\n  if (newStartIndex <= newEndIndex) {\r\n    for (let i = newStartIndex; i <= newEndIndex; i++) {\r\n      let childEl = createElm(newChildren[i])\r\n      // 这里可能是向后追加 ，也可能是向前追加\r\n      let anchor = newChildren[newEndIndex + 1] ? newChildren[newEndIndex + 1].el : null // 获取下一个元素\r\n      // el.appendChild(childEl);\r\n      el.insertBefore(childEl, anchor) // anchor为null的时候等同于 appendChild\r\n    }\r\n  }\r\n\r\n  // 3. 同序列尾部卸载，删除尾部多余的老孩子\r\n  // a b c d e f\r\n  // a b c d\r\n  // 4. 同序列头部卸载，删除头部多余的老孩子\r\n  // e f a b c d\r\n  //     a b c d\r\n  if (oldStartIndex <= oldEndIndex) {\r\n    for (let i = oldStartIndex; i <= oldEndIndex; i++) {\r\n      if (oldChildren[i]) {\r\n        let childEl = oldChildren[i].el\r\n        el.removeChild(childEl)\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @name 初始化元素\r\n * @desc 在Vue原型上扩展 render 函数相关的方法， _c _s _v _update...\r\n * @desc 调用render方法产生虚拟DOM，即以 VNode节点作为基础的树\r\n * @desc 将vnode转化成真实dom 并 挂载页面\r\n * @todo patch 既有初始化元素的功能 ，又有更新元素的功能\r\n * @todo mountComponent 方法内实例化一个渲染 watcher，并立即执行其回调\r\n * @todo callHook 调用生命周期钩子函数\r\n */\r\nimport Watcher from './observe/watcher'\r\nimport { createElementVNode, createTextVNode } from './vdom'\r\nimport { patch } from './vdom/patch'\r\n\r\n// 在Vue原型上扩展 render 函数相关的方法， _c _s _v ...\r\nexport function initLifeCycle(Vue) {\r\n  // _c('div',{},...children)\r\n  // _c('div',{id:\"app\",style:{\"color\":\"red\",\" background\":\"yellow\"}},_v(\"hello\"+_s(name)+\"world\"),_c('span',null))\r\n  Vue.prototype._c = function () {\r\n    return createElementVNode(this, ...arguments)\r\n  }\r\n  // _v(text)\r\n  Vue.prototype._v = function () {\r\n    return createTextVNode(this, ...arguments)\r\n  }\r\n  Vue.prototype._s = function (value) {\r\n    if (typeof value !== 'object') return value\r\n    return JSON.stringify(value)\r\n  }\r\n  Vue.prototype._render = function () {\r\n    // 当渲染的时候会去实例中取值，我们就可以将属性和视图绑定在一起\r\n    const vm = this\r\n    return vm.$options.render.call(vm) // 通过ast语法转义后生成的 render方法\r\n  }\r\n  Vue.prototype._update = function (vnode) {\r\n    // 将vnode转化成真实dom\r\n    const vm = this\r\n    const el = vm.$el\r\n    // patch既有初始化元素的功能 ，又有更新元素的功能\r\n    vm.$el = patch(el, vnode)\r\n  }\r\n}\r\n\r\n// 初始化元素\r\nexport function mountComponent(vm, el) {\r\n  // 这里的el 是通过querySelector获取的\r\n  vm.$el = el\r\n\r\n  const updateComponent = () => {\r\n    // vm._render 创建虚拟DOM\r\n    // vm._update 把 VNode 渲染成真实的DOM\r\n    vm._update(vm._render())\r\n  }\r\n\r\n  // true用于标识是一个渲染watcher\r\n  const watcher = new Watcher(vm, updateComponent, true)\r\n  console.log('watcher', watcher)\r\n}\r\n\r\n// vue核心流程\r\n// 1） 创造了响应式数据\r\n// 2） 将模板字符串 转换成 ast语法树\r\n// 3)  将ast语法树 转换成 指定格式的render函数字符串，利用模版引擎再次转换成 render函数，后续每次数据更新可以只执行render函数 (无需再次执行ast转化的过程)\r\n// 4） 利用render函数去创建 虚拟DOM（使用响应式数据）\r\n// 5） 根据生成的虚拟节点创造真实的DOM\r\n\r\n// 调用生命周期钩子函数\r\nexport function callHook(vm, hook) {\r\n  const handlers = vm.$options[hook]\r\n  if (handlers) {\r\n    handlers.forEach(handler => handler.call(vm))\r\n  }\r\n}\r\n","/**\r\n * @name 重写数组7个可以改变自身的方法，切片编程\r\n * @todo 1. Vue 的响应式是通过 Object.defineProperty() 实现的，这个 api 没办法监听数组长度的变化，也就没办法监听数组的新增。\r\n * @todo 2. Vue 无法检测通过数组索引改变数组的操作，这不是 Object.defineProperty() api 的原因，而是尤大认为性能消耗与带来的用户体验不成正比。对数组进行响应式检测会带来很大的性能消耗，因为数组项可能会大，比如1000条、10000条。\r\n * @todo 3. defineProperty无法监听数组的新增，即无法触发set方法。可手动对新增内容进行观测 并 手动触发watcher更新 - ob.dep.notify()\r\n */\r\n\r\nlet oldArrayProto = Array.prototype // 获取数组的原型\r\n// newArrayProto.__proto__  = oldArrayProto\r\nexport let newArrayProto = Object.create(oldArrayProto)\r\n\r\n// 找到所有的变异方法\r\nlet methods = ['push', 'pop', 'shift', 'unshift', 'reverse', 'sort', 'splice'] // concat slice 都不会改变原数组\r\n\r\nmethods.forEach(method => {\r\n  // 这里重写了数组的方法\r\n  newArrayProto[method] = function (...args) {\r\n    // args reset参数收集，args为真正数组，arguments为伪数组\r\n    const result = oldArrayProto[method].call(this, ...args) // 内部调用原来的方法，函数的劫持，切片编程\r\n\r\n    // 我们需要对新增的数据再次进行劫持\r\n    let inserted\r\n    let ob = this.__ob__\r\n\r\n    switch (method) {\r\n      case 'push':\r\n      case 'unshift': // arr.unshift(1,2,3)\r\n        inserted = args\r\n        break\r\n      case 'splice': // arr.splice(0,1,{a:1},{a:1})\r\n        inserted = args.slice(2)\r\n      default:\r\n        break\r\n    }\r\n\r\n    if (inserted) {\r\n      // 对新增的内容再次进行观测\r\n      ob.observeArray(inserted)\r\n    }\r\n\r\n    // 通知 watcher 更新渲染\r\n    ob.dep.notify()\r\n    return result\r\n  }\r\n})\r\n","/**\r\n * @name 数据劫持\r\n * @todo 1. 只对对象进行劫持\r\n * @todo 2. 如果一个对象被劫持过了，那就不需要再被劫持了 (要判断一个对象是否被劫持过，可以在对象上增添一个实例，用实例的原型链来判断是否被劫持过)\r\n * @todo 3. Object.defineProperty只能劫持已经存在的属性，对象新增属性和数组新增元素无法劫持 （vue会为此单独写一些api语法糖  $set $delete）\r\n * @todo 4. 循环对象，对属性依次递归劫持，性能差\r\n * @todo 5. setter方法中修改属性之后重新观测，目的：新值为对象或数组的话，可以劫持其数据\r\n * @todo 6. 重写数组7个可以改变自身的方法，切片编程\r\n * @todo 7. this 实例挂载到 data 数据上，将__ob__ 变成不可枚举，防止栈溢出【用于判断对象是否被劫持过 和 劫持变异数组新增数据】\r\n * @split 依赖收集--------- \r\n * @todo 8. 触发 getter 时双向依赖收集操作 dep.depend()\r\n * @todo 9. 触发 setter 时通知 watcher 更新 dep.notify()\r\n * @split $set原理---------\r\n * @todo 10. 给每个数组/对象都增加 dep 收集功能，这样就可以通过 xxx.__ob__.dep.notify() 手动触发 watcher 更新了 即 vm.$set 原理\r\n * @todo 11. 递归收集，数组的话需要递归处理，因为数组中的嵌套 数组/对象 无法走到 Object.defineProperty，所以说无法被劫持\r\n */\r\n\r\nimport { newArrayProto } from './array'\r\nimport Dep from './dep'\r\n\r\nclass Observer {\r\n  constructor(data) {\r\n    // 给每个数组/对象都增加 dep 收集功能\r\n    // 对于数组来说，[1, 2, [3, 4, 5], {a: 6}]，其成员中的数组和对象本身是没有被劫持过的\r\n    // 对于对象来说，{list: [1, 2, 3], info:{a: 4, b: 5}}，其属性中的数组和对象本身虽然其实被劫持过了。但是必须引用改变，才可以触发setter，更新 watcher。在外部无法调用这个 dep 收集器的相关方法去更新 watcher\r\n    // 如果想要在数组新增成员或者对象新增属性后，也可以更新 watcher，必须在给数组/对象本身增加 dep 收集器，这样就可以通过 xxx.__ob__.dep.notify() 手动触发 watcher 了\r\n    this.dep = new Dep()\r\n\r\n    // data.__ob__ = this // 给数据加了一个标识 如果数据上有__ob__ 则说明这个属性被观测过了\r\n    Object.defineProperty(data, '__ob__', {\r\n      value: this,\r\n      enumerable: false, // 将__ob__ 变成不可枚举 （循环的时候无法获取到，防止栈溢出）\r\n    })\r\n\r\n    if (Array.isArray(data)) {\r\n      // 这里我们可以重写可以修改数组本身的方法 7个方法，切片编程：需要保留数组原有的特性，并且可以重写部分方法\r\n      data.__proto__ = newArrayProto\r\n      this.observeArray(data) // 如果数组中放的是对象 可以监控到对象的变化\r\n    } else {\r\n      this.walk(data)\r\n    }\r\n  }\r\n\r\n  // 循环对象\"重新定义属性\",对属性依次劫持，性能差\r\n  // \"重新定义属性\"，个人理解，和proxy类似，对象和proxy返回的代理对象并不全等，其引用不同；\r\n  // 入参属性为data[key]，使用defineProperty劫持之后，其属性变为响应式属性，和之前的普通属性断开了关联，可以理解为重新定义了属性\r\n  // 换句话来说，data[key]仅仅是给其对应的响应式属性提供了一个默认值，无任何关联\r\n  // 如果不传入默认值，而是在getter、setter中访问 data[key]，则会出现栈溢出的现象   getter -> data.name -> getter -> data.name ->...无限循环\r\n  walk(data) {\r\n    Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\r\n  }\r\n\r\n  // 观测数组\r\n  observeArray(data) {\r\n    data.forEach(item => observe(item))\r\n  }\r\n}\r\n\r\n// 深层次嵌套会递归处理，递归多了性能就差  vue3-> proxy\r\nfunction dependArray(value) {\r\n  for (let i = 0; i < value.length; i++) {\r\n    let current = value[i]\r\n    current.__ob__ && current.__ob__.dep.depend()\r\n    if (Array.isArray(current)) {\r\n      dependArray(current)\r\n    } \r\n  }\r\n}\r\n\r\n// 使用defineProperty API进行属性劫持\r\nexport function defineReactive(target, key, value) {\r\n  // 深度属性劫持，对所有的数组/对象都进行属性劫持，childOb.dep 用来收集依赖的\r\n  let childOb = observe(value)\r\n\r\n  let dep = new Dep() // 每一个属性都有一个 dep\r\n\r\n  // Object.defineProperty只能劫持已经存在的属性，新增属性无法劫持 （vue里面会为此单独写一些语法糖  $set $delete）\r\n  Object.defineProperty(target, key, {\r\n    // 取值的时候 会执行get\r\n    get() {\r\n      // 保证了只有在模版渲染阶段的取值操作才会进行依赖收集\r\n      if (Dep.target) {\r\n        console.log('>>>>>get', key)\r\n        dep.depend() // 让当前的watcher 记住这个 dep；同时让这个属性的 dep 记住当前的 watcher\r\n        if (childOb) {\r\n          childOb.dep.depend() // 让数组/对象本身也实现依赖收集，$set原理\r\n          if (Array.isArray(value)) { // 数组的话需要递归处理，因为数组中的嵌套 数组/对象 无法走到 Object.defineProperty，所以说无法被劫持\r\n            dependArray(value)\r\n          }\r\n        }\r\n      }\r\n      return value\r\n    },\r\n    // 修改的时候 会执行set\r\n    set(newValue) {\r\n      if (newValue === value) return\r\n\r\n      // 修改属性之后重新观测，目的：新值为对象或数组的话，可以劫持其数据\r\n      observe(newValue)\r\n      value = newValue\r\n      console.log('>>>>>dep',key,dep)\r\n      // 通知 watcher 更新\r\n      dep.notify()\r\n    },\r\n  })\r\n}\r\n\r\n// 数据观测\r\nexport function observe(data) {\r\n  // 只对对象进行劫持\r\n  if (typeof data !== 'object' || data == null) {\r\n    return\r\n  }\r\n\r\n  // 如果一个对象被劫持过了，那就不需要再被劫持了 (要判断一个对象是否被劫持过，可以在对象上增添一个实例，用实例的原型链来判断是否被劫持过)\r\n  if (data.__ob__ instanceof Observer) {\r\n    return data.__ob__\r\n  }\r\n\r\n  return new Observer(data)\r\n}\r\n","/**\r\n * @name Vue初始化状态（初始化数据、初始化计算属性）\r\n * @split 初始化数据---------\r\n * @todo 1. 对data进行劫持，并将data挂载到vm上 vm._data = data\r\n * @todo 2. 循环data，将vm._data用vm来代理\r\n * @split 初始化计算属性---------\r\n * @todo 1. 给每个计算属性都创建一个 watcher，并标识为 lazy，不会立即执行 get-fn，并将计算属性watcher 都保存到 vm上\r\n * @todo 2. 劫持计算属性getter/setter\r\n * @todo 3. 当访问计算属性时，如果为脏的，则重新获取值，如果为干净的，则取 watcher上的缓存值，还要让计算属性watcher订阅的dep，我们应该让当前计算属性watcher 订阅的dep，也去收集上一层的watcher 即 Dep.target（可能是计算属性watcher，也可能是渲染watcher)\r\n * @split 初始化监听器---------\r\n * @todo 1. key：需要观察的表达式；要兼容 字符串 or 函数\r\n * @todo 2. handler：回调函数；要兼容 数组 or （字符串、函数、对象）情况\r\n * @todo 3. 最终调用 vm.$watch 去创建一个监听器watch\r\n */\r\n\r\nimport { observe } from './observe/index'\r\nimport Watcher from './observe/watcher'\r\nimport Dep from './observe/dep'\r\nimport { nextTick } from './util/next-tick'\r\n\r\n// 初始化状态\r\nexport function initState(vm) {\r\n  const opts = vm.$options // 获取所有的选项\r\n\r\n  // 初始化数据\r\n  if (opts.data) {\r\n    initData(vm)\r\n  }\r\n\r\n  // 初始化计算属性\r\n  if (opts.computed) {\r\n    initComputed(vm)\r\n  }\r\n\r\n  // 初始化监听器\r\n  if (opts.watch) {\r\n    initWatch(vm)\r\n  }\r\n}\r\n\r\n// 初始化数据\r\nfunction initData(vm) {\r\n  let data = vm.$options.data // data可能是函数和对象\r\n  data = typeof data === 'function' ? data.call(vm) : data\r\n\r\n  vm._data = data // 我将返回的对象放到了_data上\r\n\r\n  // vue2采用 defineProperty API，对data进行劫持\r\n  observe(data)\r\n\r\n  // 将vm._data 用 vm来代理 ，访问 vm.name = vm._data.name\r\n  for (let key in data) {\r\n    if (key === '_data') return\r\n\r\n    proxy(vm, '_data', key)\r\n  }\r\n}\r\n\r\nfunction proxy(vm, target, key) {\r\n  Object.defineProperty(vm, key, {\r\n    // vm.name\r\n    get() {\r\n      return vm[target][key] // vm._data.name\r\n    },\r\n    set(newValue) {\r\n      vm[target][key] = newValue\r\n    },\r\n  })\r\n}\r\n\r\n// 初始化计算属性\r\nfunction initComputed(vm) {\r\n  const computed = vm.$options.computed\r\n  const watchers = (vm._computedWatchers = {}) // 将每个计算属性对应的watcher 都保存到 vm上\r\n  for (let key in computed) {\r\n    let userDef = computed[key]\r\n\r\n    // 兼容不同写法 函数方式 和 对象getter/setter方式\r\n    let fn = typeof userDef === 'function' ? userDef : userDef.get\r\n\r\n    // 给每个计算属性都创建一个 watcher，并标识为 lazy，不会立即执行 get-fn\r\n    watchers[key] = new Watcher(vm, fn, { lazy: true })\r\n\r\n    // 劫持计算属性getter/setter\r\n    defineComputed(vm, key, userDef)\r\n  }\r\n}\r\n\r\n// 劫持计算属性\r\nfunction defineComputed(target, key, userDef) {\r\n  const setter = userDef.set || (() => {})\r\n\r\n  Object.defineProperty(target, key, {\r\n    get: createComputedGetter(key),\r\n    set: setter,\r\n  })\r\n}\r\n\r\n// 劫持计算属性的访问/getter\r\nfunction createComputedGetter(key) {\r\n  return function () {\r\n    const watcher = this._computedWatchers[key] // this就是 defineProperty 劫持的targer。获取到计算属性对应的watcher\r\n\r\n    // 如果是脏的，就去执行用户传入的函数\r\n    if (watcher.dirty) {\r\n      watcher.evaluate() // 求值后 dirty变为false，下次就不求值了，走缓存\r\n    }\r\n\r\n    // 当前计算属性watcher 出栈后，还有渲染watcher 或者其他计算属性watcher，我们应该让当前计算属性watcher 订阅的 dep，也去收集上一层的watcher 即Dep.target（可能是计算属性watcher，也可能是渲染watcher)\r\n    // 注：计算属性根本不会收集依赖，但是会让自己的依赖属性去收集watcher\r\n    if (Dep.target) {\r\n      watcher.depend()\r\n    }\r\n\r\n    // 返回watcher上的值\r\n    return watcher.value\r\n  }\r\n}\r\n\r\n// 初始化监听器\r\nfunction initWatch(vm) {\r\n  let watch = vm.$options.watch\r\n  for (let key in watch) {\r\n    const handler = watch[key] // handler有可能是 (字符串 函数 对象) 或 数组\r\n    if (Array.isArray(handler)) {\r\n      for (let i = 0; i < handler.length; i++) {\r\n        createWatcher(vm, key, handler[i])\r\n      }\r\n    } else {\r\n      createWatcher(vm, key, handler)\r\n    }\r\n  }\r\n}\r\n\r\n// 最终调用 vm.$watch 去创建一个监听器watch\r\nfunction createWatcher(vm, key, handler) {\r\n  let options = {}\r\n  // handler 有可能是 字符串  函数 对象\r\n  if (typeof handler === 'string') {\r\n    handler = vm[handler]\r\n  }\r\n  // 兼容对象\r\n  else if (Object.prototype.toString.call(handler) === '[object Object]') {\r\n    options = handler\r\n    handler = handler.handler\r\n  }\r\n  return vm.$watch(key, handler, options)\r\n}\r\n\r\n// 在Vue原型上扩展 $nextTick $watch 方法\r\nexport function initStateMixin(Vue) {\r\n  Vue.prototype.$nextTick = nextTick // 把 nextTick 挂载到vue原型上，方便用户在实例上使用\r\n\r\n  // 监听的值发生变化了，直接执行cb函数即可\r\n  Vue.prototype.$watch = function (exprOrFn, cb, options = {}) {\r\n    options.user = true\r\n    // exprOrFn 可能是 字符串firstname or 函数()=>vm.firstname\r\n    const watcher = new Watcher(this, exprOrFn, options, cb)\r\n\r\n    // 立即执行\r\n    if (options.immediate) {\r\n      cb.call(this, watcher.value, undefined)\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @name 工具类方法\r\n * @decs 重点关注下 策略模式 的应用，可以大大减少 if else 代码量\r\n */\r\n\r\nconst strats = {}\r\nconst LIFECYCLE = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed']\r\nLIFECYCLE.forEach(hook => {\r\n  strats[hook] = function (p, c) {\r\n    // 第一次 { } { created: function(){} }   => { created: [fn] }\r\n    // 第二次 { created: [fn] }  { created: function(){} } => { created: [fn,fn] }\r\n    // 第三次 { created: [fn,fn] }  { } => { created: [fn,fn] }\r\n    if (c) {\r\n      if (p) {\r\n        // 如果儿子有，父亲有\r\n        return p.concat(c)\r\n      } else {\r\n        // 儿子有，父亲没有，则将儿子包装成数组\r\n        return [c]\r\n      }\r\n    } else {\r\n      return p // 如果儿子没有，则用父亲即可\r\n    }\r\n  }\r\n})\r\n\r\n// 合并选项\r\nexport function mergeOptions(parent, child) {\r\n  const options = {}\r\n  // 循环老的options { }\r\n  for (let key in parent) {\r\n    mergeField(key)\r\n  }\r\n  // 循环新的options { created: function(){} }\r\n  for (let key in child) {\r\n    if (!parent.hasOwnProperty(key)) {\r\n      mergeField(key)\r\n    }\r\n  }\r\n\r\n  function mergeField(key) {\r\n    // 策略模式 用策略模式减少if /else\r\n    if (strats[key]) {\r\n      options[key] = strats[key](parent[key], child[key])\r\n    } else {\r\n      // 如果不在策略中则以儿子为主\r\n      options[key] = child[key] || parent[key]\r\n    }\r\n  }\r\n  return options\r\n}\r\n","/**\r\n * @name 给Vue扩展初始化方法\r\n */\r\n\r\nimport { compileToFunction } from './compiler'\r\nimport { mountComponent, callHook } from './lifecycle'\r\nimport { initState } from './state'\r\nimport { mergeOptions } from './utils'\r\n\r\n// 就是给Vue增加init方法的\r\nexport function initMixin(Vue) {\r\n  // 用于初始化操作\r\n  Vue.prototype._init = function (options) {\r\n    // vm.$options 就是获取用户的配置\r\n    const vm = this\r\n    // mixin原理 将合并后的选项挂载到vm实例上    this.constructor.options  即 构造函数上的options = Vue.options\r\n    vm.$options = mergeOptions(this.constructor.options, options)\r\n\r\n    callHook(vm, 'beforeCreate') // 访问不到 this.xxx\r\n\r\n    // 初始化状态\r\n    initState(vm)\r\n\r\n    callHook(vm, 'created') // 可以访问到 this.xxx\r\n\r\n    if (options.el) {\r\n      vm.$mount(options.el) // 实现数据的挂载\r\n    }\r\n  }\r\n  Vue.prototype.$mount = function (el) {\r\n    const vm = this\r\n    el = document.querySelector(el)\r\n    let ops = vm.$options\r\n\r\n    // 没有render函数\r\n    if (!ops.render) {\r\n      let template\r\n      // 没有render函数，看一下是否写了tempate, 没写template则采用外部的template\r\n      if (ops.template && el) {\r\n        template = ops.template\r\n      } else if (!ops.template && el) {\r\n        template = el.outerHTML\r\n      }\r\n      if (template && el) {\r\n        // 这里需要对模板进行编译\r\n        const render = compileToFunction(template)\r\n        ops.render = render // 最终会被编译成 h('xxx')\r\n      }\r\n    }\r\n    mountComponent(vm, el) // 组件的挂载\r\n\r\n    // script 标签引用的 vue.global.js 这个编译过程是在浏览器运行的\r\n    // runtime是不包含模板编译的, 整个编译是打包的时候通过loader来转义.vue文件的, 用runtime的时候不能使用template\r\n  }\r\n}\r\n","/**\r\n * @name 全局API\r\n */\r\n\r\nimport { mergeOptions } from './utils'\r\n\r\nexport function initGlobalAPI(Vue) {\r\n  // 静态属性\r\n  Vue.options = {}\r\n  // 静态方法\r\n  Vue.mixin = function (mixin) {\r\n    // 将 全局的options 和 用户的选项 进行合并\r\n    this.options = mergeOptions(this.options, mixin)\r\n    return this\r\n  }\r\n}\r\n","// ------------- 为了方便观察前后的虚拟节点--测试的-----------------\r\nimport Vue from '../index'\r\nimport {\r\n  compileToFunction\r\n} from '../compiler'\r\nimport {\r\n  createElm,\r\n  patch\r\n} from '../vdom/patch'\r\n\r\nconst renderMap = function () {\r\n  // 1. 新老节点不相同（判断节点的tag和节点的key），直接用新节点替换老节点，无需比对\r\n  // let render1 = compileToFunction(`<h1 key='a'>老节点</h1>`)\r\n  // let render2 = compileToFunction(`<h1 key='b'>新节点</h1>`)\r\n\r\n  // 2. 新老节点相同，且是标签，比较标签属性；然后比较两个节点的孩子\r\n  // 老节点没孩子，新节点有孩子，挂载\r\n  // let render1 = compileToFunction(`<h1 key=\"a\" style=\"color: #de5e60; border: 1px solid #de5e60; height: 85px\"></h1>`)\r\n  // let render2 = compileToFunction(\r\n  //   `<h1 key=\"a\" style=\"background: #FDE6D3; border: 1px solid #de5e60; height: 85px\"><li>1</li><li>2</li></h1>`,\r\n  // )\r\n\r\n  // 3. 新老节点相同，且是标签，比较标签属性；然后比较两个节点的孩子\r\n  // 老节点没孩子，新节点有孩子，删除\r\n  // let render1 = compileToFunction(`<h1 key=\"a\" style=\"color: #de5e60; border: 1px solid #de5e60; height: 85px\"><li>1</li><li>2</li></h1>`)\r\n  // let render2 = compileToFunction(\r\n  //   `<h1 key=\"a\" style=\"background: #FDE6D3; border: 1px solid #de5e60; height: 85px\"></h1>`,\r\n  // )\r\n\r\n  // 4. 新老节点相同，且是标签，比较标签属性；然后比较两个节点的孩子\r\n  // 新老节点都有孩子，（此时孩子是文本），更新文本内容\r\n  // let render1 = compileToFunction(`<h1 key=\"a\" style=\"color: #de5e60; border: 1px solid #de5e60\">老节点</h1>`)\r\n  // let render2 = compileToFunction(`<h1 key=\"a\" style=\"background: #FDE6D3; border: 1px solid #de5e60\">新节点</h1>`)\r\n\r\n  // 5. 新老节点相同，且是标签，比较标签属性；然后比较两个节点的孩子，新老节点都有孩子\r\n  // 5.1 同序列尾部挂载\r\n  // a b c d\r\n  // a b c d e f\r\n  // let render1 = compileToFunction(`<ul style=\"color: #de5e60; border: 1px solid #de5e60\">\r\n  //     <li key=\"a\">a</li>\r\n  //     <li key=\"b\">b</li>\r\n  //     <li key=\"c\">c</li>\r\n  //     <li key=\"d\">d</li>\r\n  //   </ul>`,\r\n  // )\r\n  // let render2 = compileToFunction(`<ul style=\"background: #FDE6D3; border: 1px solid #de5e60\">\r\n  //     <li key=\"a\">a</li>\r\n  //     <li key=\"b\">b</li>\r\n  //     <li key=\"c\">c</li>\r\n  //     <li key=\"d\">d</li>\r\n  //     <li key=\"e\">e</li>\r\n  //     <li key=\"f\">f</li>\r\n  //   </ul>`)\r\n\r\n  // 5.2 同序列头部挂载\r\n  //     a b c d\r\n  // e f a b c d\r\n  // let render1 = compileToFunction(`<ul style=\"color: #de5e60; border: 1px solid #de5e60\">\r\n  //     <li key=\"a\">a</li>\r\n  //     <li key=\"b\">b</li>\r\n  //     <li key=\"c\">c</li>\r\n  //     <li key=\"d\">d</li>\r\n  //   </ul>`,\r\n  // )\r\n  // let render2 = compileToFunction(`<ul style=\"background: #FDE6D3; border: 1px solid #de5e60\">\r\n  //     <li key=\"e\">e</li>\r\n  //     <li key=\"f\">f</li>\r\n  //     <li key=\"a\">a</li>\r\n  //     <li key=\"b\">b</li>\r\n  //     <li key=\"c\">c</li>\r\n  //     <li key=\"d\">d</li>\r\n  //   </ul>`)\r\n\r\n  // 5.3 同序列尾部卸载\r\n  // a b c d e f\r\n  // a b c d\r\n  // let render1 = compileToFunction(`<ul style=\"color: #de5e60; border: 1px solid #de5e60\">\r\n  //     <li key=\"a\">a</li>\r\n  //     <li key=\"b\">b</li>\r\n  //     <li key=\"c\">c</li>\r\n  //     <li key=\"d\">d</li>\r\n  //     <li key=\"e\">e</li>\r\n  //     <li key=\"f\">f</li>\r\n  //   </ul>`,\r\n  // )\r\n  // let render2 = compileToFunction(`<ul style=\"background: #FDE6D3; border: 1px solid #de5e60\">\r\n  //     <li key=\"a\">a</li>\r\n  //     <li key=\"b\">b</li>\r\n  //     <li key=\"c\">c</li>\r\n  //     <li key=\"d\">d</li>\r\n  //   </ul>`)\r\n\r\n  // 5.4 同序列头部卸载\r\n  // e f a b c d\r\n  //     a b c d\r\n  let render1 = compileToFunction(`<ul style=\"color: #de5e60; border: 1px solid #de5e60\">\r\n      <li key=\"e\">e</li>\r\n      <li key=\"f\">f</li>\r\n      <li key=\"a\">a</li>\r\n      <li key=\"b\">b</li>\r\n      <li key=\"c\">c</li>\r\n      <li key=\"d\">d</li>\r\n    </ul>`,\r\n  )\r\n  let render2 = compileToFunction(`<ul style=\"background: #FDE6D3; border: 1px solid #de5e60\">\r\n      <li key=\"a\">a</li>\r\n      <li key=\"b\">b</li>\r\n      <li key=\"c\">c</li>\r\n      <li key=\"d\">d</li>\r\n    </ul>`)\r\n\r\n  return {\r\n    render1,\r\n    render2\r\n  }\r\n}\r\n\r\nexport const diffDemo = function () {\r\n  let render1 = renderMap().render1\r\n  let vm1 = new Vue({\r\n    data: {\r\n      name: 'burc'\r\n    }\r\n  })\r\n  let prevVnode = render1.call(vm1)\r\n  let el = createElm(prevVnode)\r\n  document.body.appendChild(el)\r\n\r\n  let render2 = renderMap().render2\r\n  let vm2 = new Vue({\r\n    data: {\r\n      name: 'burc'\r\n    }\r\n  })\r\n  let nextVnode = render2.call(vm2)\r\n\r\n  setTimeout(() => {\r\n    patch(prevVnode, nextVnode)\r\n  }, 1000)\r\n}","/**\r\n * @name 实现Vue构造函数\r\n */\r\nimport { initMixin } from './init'\r\nimport { initLifeCycle } from './lifecycle'\r\nimport { initStateMixin } from './state'\r\nimport { initGlobalAPI } from './gloablAPI'\r\nimport { diffDemo } from './examples/diff'\r\n\r\n// 通过构造函数扩展方法\r\nfunction Vue(options) {\r\n  this._init(options) // 默认就调用了init\r\n}\r\n\r\ninitMixin(Vue) // 在Vue原型上扩展init方法  Vue.prototype._init  Vue.prototype.$mount\r\ninitLifeCycle(Vue) // 在Vue原型上扩展 render 函数相关的方法   Vue.prototype._render   Vue.prototype._update\r\ninitStateMixin(Vue) // 在Vue原型上扩展 $nextTick $watch 方法\r\n\r\ninitGlobalAPI(Vue) // 在Vue上扩展全局属性和方法 Vue.options Vue.mixin\r\n\r\ndiffDemo() // 测试diff，方便观察前后的虚拟节点\r\n\r\nexport default Vue\r\n"],"names":["ncname","qnameCapture","startTagOpen","RegExp","endTag","attribute","startTagClose","parseHTML","html","ELEMENT_TYPE","TEXT_TYPE","stack","currentParent","root","createASTElement","tag","attrs","type","parent","children","start","node","push","chars","text","replace","end","pop","length","advance","n","substring","parseStartTag","match","tagName","attr","name","value","textEnd","indexOf","startTagMatch","endTagMatch","genProps","str","i","obj","split","forEach","item","key","trim","JSON","stringify","slice","defaultTagRE","gen","codegen","test","tokens","lastIndex","exec","index","join","genChildren","map","child","ast","code","compileToFunction","template","console","log","render","Function","id","Dep","constructor","subs","depend","target","addDep","addSub","watcher","notify","update","pushTarget","popTarget","callbacks","waiting","flushCallbacks","cbs","cb","timerFunc","Promise","resolve","then","MutationObserver","observer","textNode","document","createTextNode","observe","characterData","textContent","setImmediate","setTimeout","nextTick","queue","has","pending","flushSchedulerQueue","flushQueue","q","run","queueWatcher","Watcher","vm","exprOrFn","options","getter","deps","depsId","Set","lazy","dirty","user","deep","undefined","get","dep","add","call","oldValue","newValue","evaluate","createElementVNode","data","vnode","createTextVNode","isSameVnode","vnode1","vnode2","createElm","el","createElement","patchProps","appendChild","oldProps","props","oldStyles","style","newStyles","removeAttribute","styleName","setAttribute","patch","oldVNode","isRealElement","nodeType","elm","parentElm","parentNode","newElm","insertBefore","nextSibling","removeChild","patchVnode","replaceChild","oldChildren","newChildren","updateChildren","mountChildren","innerHTML","oldStartIndex","newStartIndex","oldEndIndex","newEndIndex","oldStartVnode","newStartVnode","oldEndVnode","newEndVnode","childEl","anchor","initLifeCycle","Vue","prototype","_c","arguments","_v","_s","_render","$options","_update","$el","mountComponent","updateComponent","callHook","hook","handlers","handler","oldArrayProto","Array","newArrayProto","Object","create","methods","method","args","result","inserted","ob","__ob__","observeArray","Observer","defineProperty","enumerable","isArray","__proto__","walk","keys","defineReactive","dependArray","current","childOb","set","initState","opts","initData","computed","initComputed","watch","initWatch","_data","proxy","watchers","_computedWatchers","userDef","fn","defineComputed","setter","createComputedGetter","createWatcher","toString","$watch","initStateMixin","$nextTick","immediate","strats","LIFECYCLE","p","c","concat","mergeOptions","mergeField","hasOwnProperty","initMixin","_init","$mount","querySelector","ops","outerHTML","initGlobalAPI","mixin","renderMap","render1","render2","diffDemo","vm1","prevVnode","body","vm2","nextVnode"],"mappings":";;;;;;EAAA;EACA;EACA;EACA;;EAEA,MAAMA,MAAM,GAAI,CAA6B,4BAAA,CAAA,CAAA;EAC7C,MAAMC,YAAY,GAAI,CAAA,IAAA,EAAMD,MAAO,CAAA,KAAA,EAAOA,MAAO,CAAE,CAAA,CAAA,CAAA;EACnD;EACA,MAAME,YAAY,GAAG,IAAIC,MAAM,CAAE,CAAIF,EAAAA,EAAAA,YAAa,EAAC,CAAC,CAAA;EACpD;EACA,MAAMG,MAAM,GAAG,IAAID,MAAM,CAAE,CAAOF,KAAAA,EAAAA,YAAa,QAAO,CAAC,CAAA;EACvD;EACA,MAAMI,SAAS,GAAG,2EAA2E,CAAC;EAC9F,MAAMC,aAAa,GAAG,YAAY,CAAC;;EAEnC;EACA;EACA;EACA;EACA;EACA;EACA;EACO,SAASC,SAAS,CAACC,IAAI,EAAE;IAC9B,MAAMC,YAAY,GAAG,CAAC,CAAC;IACvB,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpB,MAAMC,KAAK,GAAG,EAAE,CAAC;EACjB,EAAA,IAAIC,aAAa,CAAC;EAClB,EAAA,IAAIC,IAAI,CAAA;;EAER;EACA,EAAA,SAASC,gBAAgB,CAACC,GAAG,EAAEC,KAAK,EAAE;MACpC,OAAO;QACLD,GAAG;EAAE;EACLE,MAAAA,IAAI,EAAER,YAAY;EAAE;QACpBO,KAAK;EAAE;EACPE,MAAAA,MAAM,EAAE,IAAI;EACZC,MAAAA,QAAQ,EAAE,EAAA;OACX,CAAA;EACH,GAAA;;EAEA;EACA,EAAA,SAASC,KAAK,CAACL,GAAG,EAAEC,KAAK,EAAE;MACzB,IAAIK,IAAI,GAAGP,gBAAgB,CAACC,GAAG,EAAEC,KAAK,CAAC,CAAC;MACxC,IAAI,CAACH,IAAI,EAAE;QACTA,IAAI,GAAGQ,IAAI,CAAC;EACd,KAAA;;EACA,IAAA,IAAIT,aAAa,EAAE;EACjBS,MAAAA,IAAI,CAACH,MAAM,GAAGN,aAAa,CAAC;EAC5BA,MAAAA,aAAa,CAACO,QAAQ,CAACG,IAAI,CAACD,IAAI,CAAC,CAAC;EACpC,KAAA;;EACAV,IAAAA,KAAK,CAACW,IAAI,CAACD,IAAI,CAAC,CAAA;MAChBT,aAAa,GAAGS,IAAI,CAAC;EACvB,GAAA;;EAEA;IACA,SAASE,KAAK,CAACC,IAAI,EAAE;MACnBA,IAAI,GAAGA,IAAI,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;EAC9B;EACA,IAAA,IAAID,IAAI,EAAE;EACRZ,MAAAA,aAAa,CAACO,QAAQ,CAACG,IAAI,CAAC;EAC1BL,QAAAA,IAAI,EAAEP,SAAS;UACfc,IAAI;EACJN,QAAAA,MAAM,EAAEN,aAAAA;EACV,OAAC,CAAC,CAAA;EACJ,KAAA;EACF,GAAA;;EAEA;IACA,SAASc,GAAG,CAACX,GAAG,EAAE;MAChBJ,KAAK,CAACgB,GAAG,EAAE,CAAC;MACZf,aAAa,GAAGD,KAAK,CAACA,KAAK,CAACiB,MAAM,GAAG,CAAC,CAAC,CAAA;EACzC,GAAA;;EAEA;IACA,SAASC,OAAO,CAACC,CAAC,EAAE;EAClBtB,IAAAA,IAAI,GAAGA,IAAI,CAACuB,SAAS,CAACD,CAAC,CAAC,CAAA;EAC1B,GAAA;;EAEA;EACA,EAAA,SAASE,aAAa,GAAG;EACvB,IAAA,MAAMZ,KAAK,GAAGZ,IAAI,CAACyB,KAAK,CAAC/B,YAAY,CAAC,CAAA;EACtC,IAAA,IAAIkB,KAAK,EAAE;EACT,MAAA,MAAMa,KAAK,GAAG;EACZC,QAAAA,OAAO,EAAEd,KAAK,CAAC,CAAC,CAAC;EAAE;EACnBJ,QAAAA,KAAK,EAAE,EAAA;SACR,CAAA;EACDa,MAAAA,OAAO,CAACT,KAAK,CAAC,CAAC,CAAC,CAACQ,MAAM,CAAC,CAAA;QAExB,IAAIO,IAAI,EAAET,GAAG,CAAA;EACb;QACA,OAAO,EAAEA,GAAG,GAAGlB,IAAI,CAACyB,KAAK,CAAC3B,aAAa,CAAC,CAAC,KAAK6B,IAAI,GAAG3B,IAAI,CAACyB,KAAK,CAAC5B,SAAS,CAAC,CAAC,EAAE;EAC3EwB,QAAAA,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC,CAACP,MAAM,CAAC,CAAA;EACvBK,QAAAA,KAAK,CAACjB,KAAK,CAACM,IAAI,CAAC;EAAEc,UAAAA,IAAI,EAAED,IAAI,CAAC,CAAC,CAAC;EAAEE,UAAAA,KAAK,EAAEF,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,IAAI,IAAA;EAAK,SAAC,CAAC,CAAA;EACnF,OAAA;;EAEA;EACA,MAAA,IAAIT,GAAG,EAAE;EACPG,QAAAA,OAAO,CAACH,GAAG,CAAC,CAAC,CAAC,CAACE,MAAM,CAAC,CAAA;EACxB,OAAA;EACA,MAAA,OAAOK,KAAK,CAAA;EACd,KAAA;EACA,IAAA,OAAO,KAAK,CAAA;EACd,GAAA;EAEA,EAAA,OAAOzB,IAAI,EAAE;EACX;EACA;EACA,IAAA,IAAI8B,OAAO,GAAG9B,IAAI,CAAC+B,OAAO,CAAC,GAAG,CAAC,CAAA;MAC/B,IAAID,OAAO,IAAI,CAAC,EAAE;EAChB;QACA,MAAME,aAAa,GAAGR,aAAa,EAAE,CAAA;EAErC,MAAA,IAAIQ,aAAa,EAAE;UACjBpB,KAAK,CAACoB,aAAa,CAACN,OAAO,EAAEM,aAAa,CAACxB,KAAK,CAAC,CAAA;EACjD,QAAA,SAAA;EACF,OAAA;;EAEA;EACA,MAAA,IAAIyB,WAAW,GAAGjC,IAAI,CAACyB,KAAK,CAAC7B,MAAM,CAAC,CAAA;EACpC,MAAA,IAAIqC,WAAW,EAAE;EACfZ,QAAAA,OAAO,CAACY,WAAW,CAAC,CAAC,CAAC,CAACb,MAAM,CAAC,CAAA;EAC9BF,QAAAA,GAAG,CAACe,WAAW,CAAC,CAAC,CAAC,CAAC,CAAA;EACnB,QAAA,SAAA;EACF,OAAA;EACF,KAAA;MACA,IAAIH,OAAO,GAAG,CAAC,EAAE;QACf,IAAId,IAAI,GAAGhB,IAAI,CAACuB,SAAS,CAAC,CAAC,EAAEO,OAAO,CAAC,CAAC;EACtC,MAAA,IAAId,IAAI,EAAE;UACRD,KAAK,CAACC,IAAI,CAAC,CAAA;EACXK,QAAAA,OAAO,CAACL,IAAI,CAACI,MAAM,CAAC,CAAA;EACtB,OAAA;EACF,KAAA;EACF,GAAA;EAEA,EAAA,OAAOf,IAAI,CAAA;EACb;;ECrIA;EACA,SAAS6B,QAAQ,CAAC1B,KAAK,EAAE;IACvB,IAAI2B,GAAG,GAAG,EAAE,CAAA;EACZ,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG5B,KAAK,CAACY,MAAM,EAAEgB,CAAC,EAAE,EAAE;EACrC,IAAA,IAAIT,IAAI,GAAGnB,KAAK,CAAC4B,CAAC,CAAC,CAAA;EACnB,IAAA,IAAIT,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;EACzB;QACA,IAAIS,GAAG,GAAG,EAAE,CAAA;EACZ;QACAV,IAAI,CAACE,KAAK,CAACS,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAACC,IAAI,IAAI;UACpC,IAAI,CAACC,GAAG,EAAEZ,KAAK,CAAC,GAAGW,IAAI,CAACF,KAAK,CAAC,GAAG,CAAC,CAAA;UAClCD,GAAG,CAACI,GAAG,CAACC,IAAI,EAAE,CAAC,GAAGb,KAAK,CAACa,IAAI,EAAE,CAAA;EAChC,OAAC,CAAC,CAAA;QACFf,IAAI,CAACE,KAAK,GAAGQ,GAAG,CAAA;EAClB,KAAA;EACAF,IAAAA,GAAG,IAAK,CAAA,EAAER,IAAI,CAACC,IAAK,CAAGe,CAAAA,EAAAA,IAAI,CAACC,SAAS,CAACjB,IAAI,CAACE,KAAK,CAAE,GAAE,CAAC;EACvD,GAAA;;IACA,OAAQ,CAAA,CAAA,EAAGM,GAAG,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAE,CAAA,CAAA,CAAA;EAChC,CAAA;EAEA,MAAMC,YAAY,GAAG,0BAA0B,CAAC;EAChD,SAASC,GAAG,CAAClC,IAAI,EAAE;EACjB,EAAA,IAAIA,IAAI,CAACJ,IAAI,KAAK,CAAC,EAAE;EACnB;MACA,OAAOuC,OAAO,CAACnC,IAAI,CAAC,CAAA;EACtB,GAAC,MAAM;EACL;EACA,IAAA,IAAIG,IAAI,GAAGH,IAAI,CAACG,IAAI,CAAA;EACpB,IAAA,IAAI,CAAC8B,YAAY,CAACG,IAAI,CAACjC,IAAI,CAAC,EAAE;EAC5B;EACA,MAAA,OAAQ,MAAK2B,IAAI,CAACC,SAAS,CAAC5B,IAAI,CAAE,CAAE,CAAA,CAAA,CAAA;EACtC,KAAC,MAAM;EACL;QACA,IAAIkC,MAAM,GAAG,EAAE,CAAA;EACf,MAAA,IAAIzB,KAAK,CAAA;QACTqB,YAAY,CAACK,SAAS,GAAG,CAAC,CAAA;QAC1B,IAAIA,SAAS,GAAG,CAAC,CAAA;QACjB,OAAQ1B,KAAK,GAAGqB,YAAY,CAACM,IAAI,CAACpC,IAAI,CAAC,EAAG;EACxC,QAAA,IAAIqC,KAAK,GAAG5B,KAAK,CAAC4B,KAAK,CAAC;UACxB,IAAIA,KAAK,GAAGF,SAAS,EAAE;EACrBD,UAAAA,MAAM,CAACpC,IAAI,CAAC6B,IAAI,CAACC,SAAS,CAAC5B,IAAI,CAAC6B,KAAK,CAACM,SAAS,EAAEE,KAAK,CAAC,CAAC,CAAC,CAAA;EAC3D,SAAA;EACAH,QAAAA,MAAM,CAACpC,IAAI,CAAE,CAAA,GAAA,EAAKW,KAAK,CAAC,CAAC,CAAC,CAACiB,IAAI,EAAG,CAAA,CAAA,CAAE,CAAC,CAAA;UACrCS,SAAS,GAAGE,KAAK,GAAG5B,KAAK,CAAC,CAAC,CAAC,CAACL,MAAM,CAAA;EACrC,OAAA;EACA,MAAA,IAAI+B,SAAS,GAAGnC,IAAI,CAACI,MAAM,EAAE;EAC3B8B,QAAAA,MAAM,CAACpC,IAAI,CAAC6B,IAAI,CAACC,SAAS,CAAC5B,IAAI,CAAC6B,KAAK,CAACM,SAAS,CAAC,CAAC,CAAC,CAAA;EACpD,OAAA;EACA,MAAA,OAAQ,MAAKD,MAAM,CAACI,IAAI,CAAC,GAAG,CAAE,CAAE,CAAA,CAAA,CAAA;EAClC,KAAA;EACF,GAAA;EACF,CAAA;;EAEA;EACA,SAASC,WAAW,CAAC5C,QAAQ,EAAE;EAC7B,EAAA,OAAOA,QAAQ,CAAC6C,GAAG,CAACC,KAAK,IAAIV,GAAG,CAACU,KAAK,CAAC,CAAC,CAACH,IAAI,CAAC,GAAG,CAAC,CAAA;EACpD,CAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,SAASN,OAAO,CAACU,GAAG,EAAE;EACpB,EAAA,IAAI/C,QAAQ,GAAG4C,WAAW,CAACG,GAAG,CAAC/C,QAAQ,CAAC,CAAA;EACxC,EAAA,IAAIgD,IAAI,GAAI,CAAMD,IAAAA,EAAAA,GAAG,CAACnD,GAAI,CAAA,EAAA,EAAImD,GAAG,CAAClD,KAAK,CAACY,MAAM,GAAG,CAAC,GAAGc,QAAQ,CAACwB,GAAG,CAAClD,KAAK,CAAC,GAAG,MAAO,CAAA,EAAEkD,GAAG,CAAC/C,QAAQ,CAACS,MAAM,GAAI,CAAGT,CAAAA,EAAAA,QAAS,CAAC,CAAA,GAAG,EAAG,CAAE,CAAA,CAAA,CAAA;EAEhI,EAAA,OAAOgD,IAAI,CAAA;EACb,CAAA;EAEO,SAASC,iBAAiB,CAACC,QAAQ,EAAE;EAC1CC,EAAAA,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEF,QAAQ,CAAC,CAAA;;EAErC;EACA,EAAA,IAAIH,GAAG,GAAG3D,SAAS,CAAC8D,QAAQ,CAAC,CAAA;EAC7BC,EAAAA,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEL,GAAG,CAAC,CAAA;;EAE7B;EACA,EAAA,IAAIC,IAAI,GAAGX,OAAO,CAACU,GAAG,CAAC,CAAA;EACvBI,EAAAA,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEJ,IAAI,CAAC,CAAA;;EAE3B;IACAA,IAAI,GAAI,CAAoBA,kBAAAA,EAAAA,IAAK,CAAE,CAAA,CAAA,CAAA;EAEnC,EAAA,IAAIK,MAAM,GAAG,IAAIC,QAAQ,CAACN,IAAI,CAAC,CAAC;EAChCG,EAAAA,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEC,MAAM,CAAC,CAAA;EAEhC,EAAA,OAAOA,MAAM,CAAA;EACf,CAAA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EC5HA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIE,IAAE,GAAG,CAAC,CAAA;EAEV,MAAMC,GAAG,CAAC;EACRC,EAAAA,WAAW,GAAG;EACZ,IAAA,IAAI,CAACF,EAAE,GAAGA,IAAE,EAAE,CAAA;EACd;MACA,IAAI,CAACG,IAAI,GAAG,EAAE,CAAA;EAChB,GAAA;EACA;EACAC,EAAAA,MAAM,GAAG;EACPH,IAAAA,GAAG,CAACI,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAA;EACzB,GAAA;EACA;IACAC,MAAM,CAACC,OAAO,EAAE;EACd,IAAA,IAAI,CAACL,IAAI,CAACvD,IAAI,CAAC4D,OAAO,CAAC,CAAA;EACzB,GAAA;EACA;EACAC,EAAAA,MAAM,GAAG;MACP,IAAI,CAACN,IAAI,CAAC9B,OAAO,CAACmC,OAAO,IAAIA,OAAO,CAACE,MAAM,EAAE,CAAC,CAAA;EAChD,GAAA;EACF,CAAA;;EAEA;EACAT,GAAG,CAACI,MAAM,GAAG,IAAI,CAAA;;EAEjB;EACA,IAAIpE,KAAK,GAAG,EAAE,CAAA;EACd;EACO,SAAS0E,UAAU,CAACH,OAAO,EAAE;EAClCvE,EAAAA,KAAK,CAACW,IAAI,CAAC4D,OAAO,CAAC,CAAA;IACnBP,GAAG,CAACI,MAAM,GAAGG,OAAO,CAAA;EACtB,CAAA;EACA;EACO,SAASI,SAAS,GAAG;IAC1B3E,KAAK,CAACgB,GAAG,EAAE,CAAA;IACXgD,GAAG,CAACI,MAAM,GAAGpE,KAAK,CAACA,KAAK,CAACiB,MAAM,GAAG,CAAC,CAAC,CAAA;EACtC;;EChDA;EACA,IAAI2D,SAAS,GAAG,EAAE,CAAC;EACnB,IAAIC,OAAO,GAAG,KAAK,CAAC;;EAEpB,SAASC,cAAc,GAAG;EACxB,EAAA,IAAIC,GAAG,GAAGH,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAAA;EAC5BmC,EAAAA,OAAO,GAAG,KAAK,CAAA;EACfD,EAAAA,SAAS,GAAG,EAAE,CAAA;IACdG,GAAG,CAAC3C,OAAO,CAAC4C,EAAE,IAAIA,EAAE,EAAE,CAAC,CAAC;EAC1B,CAAA;;EAEA;EACA;EACA,IAAIC,SAAS,CAAA;EACb,IAAIC,OAAO,EAAE;EACTD,EAAAA,SAAS,GAAG,MAAM;EACdC,IAAAA,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAACN,cAAc,CAAC,CAAA;KACzC,CAAA;EACL,CAAC,MAAK,IAAGO,gBAAgB,EAAC;IACtB,IAAIC,QAAQ,GAAG,IAAID,gBAAgB,CAACP,cAAc,CAAC,CAAC;EACpD,EAAA,IAAIS,QAAQ,GAAGC,QAAQ,CAACC,cAAc,CAAC,CAAC,CAAC,CAAA;EACzCH,EAAAA,QAAQ,CAACI,OAAO,CAACH,QAAQ,EAAC;EACtBI,IAAAA,aAAa,EAAC,IAAA;EAClB,GAAC,CAAC,CAAA;EACFV,EAAAA,SAAS,GAAG,MAAM;MACdM,QAAQ,CAACK,WAAW,GAAG,CAAC,CAAA;KAC3B,CAAA;EACL,CAAC,MAAK,IAAGC,YAAY,EAAC;EAClBZ,EAAAA,SAAS,GAAG,MAAM;MACfY,YAAY,CAACf,cAAc,CAAC,CAAA;KAC9B,CAAA;EACL,CAAC,MAAI;EACDG,EAAAA,SAAS,GAAG,MAAM;MACda,UAAU,CAAChB,cAAc,CAAC,CAAA;KAC5B,CAAA;EACN,CAAA;EAEO,SAASiB,QAAQ,CAACf,EAAE,EAAE;EAC3B;EACAJ,EAAAA,SAAS,CAACjE,IAAI,CAACqE,EAAE,CAAC,CAAC;IACnB,IAAI,CAACH,OAAO,EAAE;EACZI,IAAAA,SAAS,EAAE,CAAA;EACXJ,IAAAA,OAAO,GAAG,IAAI,CAAA;EAChB,GAAA;EACF;;EC1CA;EACA,IAAImB,KAAK,GAAG,EAAE,CAAA;EACd,IAAIC,GAAG,GAAG,EAAE,CAAA;EACZ,IAAIC,OAAO,GAAG,KAAK,CAAC;;EAEpB,SAASC,mBAAmB,GAAG;EAC7B,EAAA,IAAIC,UAAU,GAAGJ,KAAK,CAACtD,KAAK,CAAC,CAAC,CAAC,CAAA;EAC/BsD,EAAAA,KAAK,GAAG,EAAE,CAAA;IACVC,GAAG,GAAG,EAAE,CAAA;EACRC,EAAAA,OAAO,GAAG,KAAK,CAAA;IACfE,UAAU,CAAChE,OAAO,CAACiE,CAAC,IAAIA,CAAC,CAACC,GAAG,EAAE,CAAC,CAAC;EACnC,CAAA;;EAEO,SAASC,YAAY,CAAChC,OAAO,EAAE;EACpC,EAAA,MAAMR,EAAE,GAAGQ,OAAO,CAACR,EAAE,CAAA;EACrB,EAAA,IAAI,CAACkC,GAAG,CAAClC,EAAE,CAAC,EAAE;EACZiC,IAAAA,KAAK,CAACrF,IAAI,CAAC4D,OAAO,CAAC,CAAA;EACnB0B,IAAAA,GAAG,CAAClC,EAAE,CAAC,GAAG,IAAI,CAAA;EACd;MACA,IAAI,CAACmC,OAAO,EAAE;QACZH,QAAQ,CAACI,mBAAmB,CAAC,CAAA;EAC7BD,MAAAA,OAAO,GAAG,IAAI,CAAA;EAChB,KAAA;EACF,GAAA;EACF;;EC1BA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAKA,IAAInC,EAAE,GAAG,CAAC,CAAA;EAEV,MAAMyC,OAAO,CAAC;IACZvC,WAAW,CAACwC,EAAE,EAAEC,QAAQ,EAAEC,OAAO,EAAE3B,EAAE,EAAE;EACrC,IAAA,IAAI,CAACjB,EAAE,GAAGA,EAAE,EAAE,CAAA;EAEd,IAAA,IAAI,OAAO2C,QAAQ,KAAK,QAAQ,EAAE;QAChC,IAAI,CAACE,MAAM,GAAG,YAAY;UACxB,OAAOH,EAAE,CAACC,QAAQ,CAAC,CAAA;SACpB,CAAA;EACH,KAAC,MAAM;EACL,MAAA,IAAI,CAACE,MAAM,GAAGF,QAAQ,CAAC;EACzB,KAAA;;EAEA,IAAA,IAAI,CAACG,IAAI,GAAG,EAAE,CAAC;EACf,IAAA,IAAI,CAACC,MAAM,GAAG,IAAIC,GAAG,EAAE,CAAC;;EAExB;MACA,IAAI,CAACN,EAAE,GAAGA,EAAE,CAAA;EACZ,IAAA,IAAI,CAACO,IAAI,GAAGL,OAAO,CAACK,IAAI,CAAC;EACzB,IAAA,IAAI,CAACC,KAAK,GAAG,IAAI,CAACD,IAAI,CAAC;;EAEvB;EACA,IAAA,IAAI,CAACE,IAAI,GAAGP,OAAO,CAACO,IAAI,CAAC;EACzB,IAAA,IAAI,CAACC,IAAI,GAAGR,OAAO,CAACQ,IAAI,CAAA;MACxB,IAAI,CAACnC,EAAE,GAAGA,EAAE,CAAA;EAEZ,IAAA,IAAI,CAACtD,KAAK,GAAG,IAAI,CAACsF,IAAI,GAAGI,SAAS,GAAG,IAAI,CAACC,GAAG,EAAE,CAAC;EAClD,GAAA;EACA;IACAhD,MAAM,CAACiD,GAAG,EAAE;EACV;EACA,IAAA,IAAIvD,EAAE,GAAGuD,GAAG,CAACvD,EAAE,CAAA;MACf,IAAI,CAAC,IAAI,CAAC+C,MAAM,CAACb,GAAG,CAAClC,EAAE,CAAC,EAAE;EACxB,MAAA,IAAI,CAAC8C,IAAI,CAAClG,IAAI,CAAC2G,GAAG,CAAC,CAAA;EACnB,MAAA,IAAI,CAACR,MAAM,CAACS,GAAG,CAACxD,EAAE,CAAC,CAAA;EACnBuD,MAAAA,GAAG,CAAChD,MAAM,CAAC,IAAI,CAAC,CAAC;EACnB,KAAA;EACF,GAAA;;EACA+C,EAAAA,GAAG,GAAG;MACJ3C,UAAU,CAAC,IAAI,CAAC,CAAC;EACjB;EACA;EACA,IAAA,IAAIhD,KAAK,GAAG,IAAI,CAACkF,MAAM,CAACY,IAAI,CAAC,IAAI,CAACf,EAAE,CAAC,CAAC;;EAEtC;MACA,IAAI,CAACU,IAAI,IAAI3E,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC,CAAA;EAElCiD,IAAAA,SAAS,EAAE,CAAC;EACZ,IAAA,OAAOjD,KAAK,CAAA;EACd,GAAA;EACA;EACA+C,EAAAA,MAAM,GAAG;EACPd,IAAAA,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAAA;MAC7B,IAAI,IAAI,CAACoD,IAAI,EAAE;EACb;EACA;QACA,IAAI,CAACC,KAAK,GAAG,IAAI,CAAA;EACnB,KAAC,MAAM;QACLV,YAAY,CAAC,IAAI,CAAC,CAAC;EACnB;EACF,KAAA;EACF,GAAA;;EAEA;EACAD,EAAAA,GAAG,GAAG;EACJ,IAAA,IAAImB,QAAQ,GAAG,IAAI,CAAC/F,KAAK,CAAA;MACzB,IAAIgG,QAAQ,GAAI,IAAI,CAAChG,KAAK,GAAG,IAAI,CAAC2F,GAAG,EAAG,CAAC;MACzC,IAAI,IAAI,CAACH,IAAI,EAAE;EACb,MAAA,IAAI,CAAClC,EAAE,CAACwC,IAAI,CAAC,IAAI,CAACf,EAAE,EAAEiB,QAAQ,EAAED,QAAQ,CAAC,CAAA;EAC3C,KAAA;EACF,GAAA;;EAEA;EACAE,EAAAA,QAAQ,GAAG;EACT,IAAA,IAAI,CAACjG,KAAK,GAAG,IAAI,CAAC2F,GAAG,EAAE,CAAC;MACxB,IAAI,CAACJ,KAAK,GAAG,KAAK,CAAA;EACpB,GAAA;EACA;EACA9C,EAAAA,MAAM,GAAG;EACP,IAAA,IAAIlC,CAAC,GAAG,IAAI,CAAC4E,IAAI,CAAC5F,MAAM,CAAA;MACxB,OAAOgB,CAAC,EAAE,EAAE;EACV,MAAA,IAAI,CAAC4E,IAAI,CAAC5E,CAAC,CAAC,CAACkC,MAAM,EAAE,CAAA;EACvB,KAAA;EACF,GAAA;EACF;;EC3GA;EACA;EACA;;EAEA;EACO,SAASyD,kBAAkB,CAACnB,EAAE,EAAErG,GAAG,EAAEyH,IAAI,EAAE,GAAGrH,QAAQ,EAAE;IAC7D,IAAIqH,IAAI,IAAI,IAAI,EAAE;MAChBA,IAAI,GAAG,EAAE,CAAA;EACX,GAAA;EACA,EAAA,IAAIvF,GAAG,GAAGuF,IAAI,CAACvF,GAAG,CAAA;EAClB,EAAA,IAAIA,GAAG,EAAE;MACP,OAAOuF,IAAI,CAACvF,GAAG,CAAA;EACjB,GAAA;IACA,OAAOwF,KAAK,CAACrB,EAAE,EAAErG,GAAG,EAAEkC,GAAG,EAAEuF,IAAI,EAAErH,QAAQ,CAAC,CAAA;EAC5C,CAAA;;EAEA;EACO,SAASuH,eAAe,CAACtB,EAAE,EAAE5F,IAAI,EAAE;EACxC,EAAA,OAAOiH,KAAK,CAACrB,EAAE,EAAEW,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEvG,IAAI,CAAC,CAAA;EACpE,CAAA;;EAEA;EACA;EACA,SAASiH,KAAK,CAACrB,EAAE,EAAErG,GAAG,EAAEkC,GAAG,EAAEuF,IAAI,EAAErH,QAAQ,EAAEK,IAAI,EAAE;IACjD,OAAO;MACL4F,EAAE;MACFrG,GAAG;MACHkC,GAAG;MACHuF,IAAI;MACJrH,QAAQ;EACRK,IAAAA,IAAAA;EACA;KACD,CAAA;EACH,CAAA;;EAEA;EACO,SAASmH,WAAW,CAACC,MAAM,EAAEC,MAAM,EAAE;EAC1C,EAAA,OAAOD,MAAM,CAAC7H,GAAG,KAAK8H,MAAM,CAAC9H,GAAG,IAAI6H,MAAM,CAAC3F,GAAG,KAAK4F,MAAM,CAAC5F,GAAG,CAAA;EAC/D;;ECtCA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACO,SAAS6F,SAAS,CAACL,KAAK,EAAE;IAC/B,IAAI;MAAE1H,GAAG;MAAEyH,IAAI;MAAErH,QAAQ;EAAEK,IAAAA,IAAAA;EAAK,GAAC,GAAGiH,KAAK,CAAA;EACzC,EAAA,IAAI,OAAO1H,GAAG,KAAK,QAAQ,EAAE;EAC3B;MACA0H,KAAK,CAACM,EAAE,GAAG5C,QAAQ,CAAC6C,aAAa,CAACjI,GAAG,CAAC,CAAC;MACvCkI,UAAU,CAACR,KAAK,CAACM,EAAE,EAAE,EAAE,EAAEP,IAAI,CAAC,CAAA;EAC9BrH,IAAAA,QAAQ,CAAC4B,OAAO,CAACkB,KAAK,IAAI;QACxBwE,KAAK,CAACM,EAAE,CAACG,WAAW,CAACJ,SAAS,CAAC7E,KAAK,CAAC,CAAC,CAAA;EACxC,KAAC,CAAC,CAAA;EACJ,GAAC,MAAM;EACL;MACAwE,KAAK,CAACM,EAAE,GAAG5C,QAAQ,CAACC,cAAc,CAAC5E,IAAI,CAAC,CAAA;EAC1C,GAAA;IACA,OAAOiH,KAAK,CAACM,EAAE,CAAA;EACjB,CAAA;;EAEA;EACO,SAASE,UAAU,CAACF,EAAE,EAAEI,QAAQ,GAAG,EAAE,EAAEC,KAAK,GAAG,EAAE,EAAE;EACxD;EACA,EAAA,IAAIC,SAAS,GAAGF,QAAQ,CAACG,KAAK,IAAI,EAAE,CAAA;EACpC,EAAA,IAAIC,SAAS,GAAGH,KAAK,CAACE,KAAK,IAAI,EAAE,CAAA;EAEjC,EAAA,KAAK,IAAIrG,GAAG,IAAIoG,SAAS,EAAE;EACzB;EACA,IAAA,IAAI,CAACE,SAAS,CAACtG,GAAG,CAAC,EAAE;EACnB8F,MAAAA,EAAE,CAACO,KAAK,CAACrG,GAAG,CAAC,GAAG,EAAE,CAAA;EACpB,KAAA;EACF,GAAA;EACA,EAAA,KAAK,IAAIA,GAAG,IAAIkG,QAAQ,EAAE;EACxB;EACA,IAAA,IAAI,CAACC,KAAK,CAACnG,GAAG,CAAC,EAAE;EACf8F,MAAAA,EAAE,CAACS,eAAe,CAACvG,GAAG,CAAC,CAAA;EACzB,KAAA;EACF,GAAA;EAEA,EAAA,KAAK,IAAIA,GAAG,IAAImG,KAAK,EAAE;MACrB,IAAInG,GAAG,KAAK,OAAO,EAAE;EACnB;EACA,MAAA,KAAK,IAAIwG,SAAS,IAAIL,KAAK,CAACE,KAAK,EAAE;UACjCP,EAAE,CAACO,KAAK,CAACG,SAAS,CAAC,GAAGL,KAAK,CAACE,KAAK,CAACG,SAAS,CAAC,CAAA;EAC9C,OAAA;EACF,KAAC,MAAM;QACLV,EAAE,CAACW,YAAY,CAACzG,GAAG,EAAEmG,KAAK,CAACnG,GAAG,CAAC,CAAC,CAAA;EAClC,KAAA;EACF,GAAA;EACF,CAAA;;EAEA;EACO,SAAS0G,KAAK,CAACC,QAAQ,EAAEnB,KAAK,EAAE;EACrC;EACA,EAAA,MAAMoB,aAAa,GAAGD,QAAQ,CAACE,QAAQ,CAAA;EACvC,EAAA,IAAID,aAAa,EAAE;MACjB,MAAME,GAAG,GAAGH,QAAQ,CAAC;EACrB,IAAA,MAAMI,SAAS,GAAGD,GAAG,CAACE,UAAU,CAAC;EACjC,IAAA,IAAIC,MAAM,GAAGpB,SAAS,CAACL,KAAK,CAAC,CAAA;MAC7BnE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE2F,MAAM,EAAEF,SAAS,CAAC,CAAA;MAEjDA,SAAS,CAACG,YAAY,CAACD,MAAM,EAAEH,GAAG,CAACK,WAAW,CAAC,CAAA;EAC/CJ,IAAAA,SAAS,CAACK,WAAW,CAACN,GAAG,CAAC,CAAC;;EAE3B,IAAA,OAAOG,MAAM,CAAA;EACf,GAAC,MAAM;EACL;EACA,IAAA,OAAOI,UAAU,CAACV,QAAQ,EAAEnB,KAAK,CAAC,CAAA;EACpC,GAAA;EACF,CAAA;EAEA,SAAS6B,UAAU,CAACV,QAAQ,EAAEnB,KAAK,EAAE;EACnC;EACA,EAAA,IAAI,CAACE,WAAW,CAACiB,QAAQ,EAAEnB,KAAK,CAAC,EAAE;EACjC,IAAA,IAAIM,EAAE,GAAGD,SAAS,CAACL,KAAK,CAAC,CAAA;EACzBmB,IAAAA,QAAQ,CAACb,EAAE,CAACkB,UAAU,CAACM,YAAY,CAACxB,EAAE,EAAEa,QAAQ,CAACb,EAAE,CAAC,CAAA;EACpD,IAAA,OAAOA,EAAE,CAAA;EACX,GAAA;IACA,IAAIA,EAAE,GAAIN,KAAK,CAACM,EAAE,GAAGa,QAAQ,CAACb,EAAG,CAAA;;EAEjC;EACA,EAAA,IAAI,CAACa,QAAQ,CAAC7I,GAAG,EAAE;EACjB,IAAA,IAAI6I,QAAQ,CAACpI,IAAI,KAAKiH,KAAK,CAACjH,IAAI,EAAE;EAChCuH,MAAAA,EAAE,CAACxC,WAAW,GAAGkC,KAAK,CAACjH,IAAI,CAAC;EAC9B,KAAA;EACF,GAAA;;EAEA;EACA;IACAyH,UAAU,CAACF,EAAE,EAAEa,QAAQ,CAACpB,IAAI,EAAEC,KAAK,CAACD,IAAI,CAAC,CAAA;EAEzC,EAAA,IAAIgC,WAAW,GAAGZ,QAAQ,CAACzI,QAAQ,IAAI,EAAE,CAAA;EACzC,EAAA,IAAIsJ,WAAW,GAAGhC,KAAK,CAACtH,QAAQ,IAAI,EAAE,CAAA;EACtC;EACA;IACA,IAAIqJ,WAAW,CAAC5I,MAAM,GAAG,CAAC,IAAI6I,WAAW,CAAC7I,MAAM,GAAG,CAAC,EAAE;EACpD;EACA8I,IAAAA,cAAc,CAAC3B,EAAE,EAAEyB,WAAW,EAAEC,WAAW,CAAC,CAAA;EAC9C,GAAA;EACA;EAAA,OACK,IAAIA,WAAW,CAAC7I,MAAM,GAAG,CAAC,EAAE;EAC/B+I,IAAAA,aAAa,CAAC5B,EAAE,EAAE0B,WAAW,CAAC,CAAA;EAChC,GAAA;EACA;EAAA,OACK,IAAID,WAAW,CAAC5I,MAAM,GAAG,CAAC,EAAE;MAC/BmH,EAAE,CAAC6B,SAAS,GAAG,EAAE,CAAA;EACnB,GAAA;EACF,CAAA;;EAEA;EACA,SAASD,aAAa,CAAC5B,EAAE,EAAE0B,WAAW,EAAE;EACtC,EAAA,KAAK,IAAI7H,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG6H,WAAW,CAAC7I,MAAM,EAAEgB,CAAC,EAAE,EAAE;EAC3C,IAAA,IAAIqB,KAAK,GAAGwG,WAAW,CAAC7H,CAAC,CAAC,CAAA;EAC1BmG,IAAAA,EAAE,CAACG,WAAW,CAACJ,SAAS,CAAC7E,KAAK,CAAC,CAAC,CAAA;EAClC,GAAA;EACF,CAAA;;EAEA;EACA,SAASyG,cAAc,CAAC3B,EAAE,EAAEyB,WAAW,EAAEC,WAAW,EAAE;IACpD,IAAII,aAAa,GAAG,CAAC,CAAA;IACrB,IAAIC,aAAa,GAAG,CAAC,CAAA;EACrB,EAAA,IAAIC,WAAW,GAAGP,WAAW,CAAC5I,MAAM,GAAG,CAAC,CAAA;EACxC,EAAA,IAAIoJ,WAAW,GAAGP,WAAW,CAAC7I,MAAM,GAAG,CAAC,CAAA;EAExC,EAAA,IAAIqJ,aAAa,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAA;EAClC,EAAA,IAAIU,aAAa,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAA;EAElC,EAAA,IAAIU,WAAW,GAAGX,WAAW,CAACO,WAAW,CAAC,CAAA;EAC1C,EAAA,IAAIK,WAAW,GAAGX,WAAW,CAACO,WAAW,CAAC,CAAA;;EAE1C;EACA,EAAA,OAAOH,aAAa,IAAIE,WAAW,IAAID,aAAa,IAAIE,WAAW,EAAE;EACnE;EACA,IAAA,IAAIrC,WAAW,CAACsC,aAAa,EAAEC,aAAa,CAAC,EAAE;EAC7CZ,MAAAA,UAAU,CAACW,aAAa,EAAEC,aAAa,CAAC,CAAC;EACzCD,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;EAC5CK,MAAAA,aAAa,GAAGT,WAAW,CAAC,EAAEK,aAAa,CAAC,CAAA;EAC9C,KAAA;EACA;EAAA,SACK,IAAInC,WAAW,CAACwC,WAAW,EAAEC,WAAW,CAAC,EAAE;EAC9Cd,MAAAA,UAAU,CAACa,WAAW,EAAEC,WAAW,CAAC,CAAC;EACrCD,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAA;EACxCK,MAAAA,WAAW,GAAGX,WAAW,CAAC,EAAEO,WAAW,CAAC,CAAA;EAC1C,KAAA;EACF,GAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;IACA,IAAIF,aAAa,IAAIE,WAAW,EAAE;MAChC,KAAK,IAAIpI,CAAC,GAAGkI,aAAa,EAAElI,CAAC,IAAIoI,WAAW,EAAEpI,CAAC,EAAE,EAAE;QACjD,IAAIyI,OAAO,GAAGvC,SAAS,CAAC2B,WAAW,CAAC7H,CAAC,CAAC,CAAC,CAAA;EACvC;EACA,MAAA,IAAI0I,MAAM,GAAGb,WAAW,CAACO,WAAW,GAAG,CAAC,CAAC,GAAGP,WAAW,CAACO,WAAW,GAAG,CAAC,CAAC,CAACjC,EAAE,GAAG,IAAI,CAAC;EACnF;EACAA,MAAAA,EAAE,CAACoB,YAAY,CAACkB,OAAO,EAAEC,MAAM,CAAC,CAAC;EACnC,KAAA;EACF,GAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;IACA,IAAIT,aAAa,IAAIE,WAAW,EAAE;MAChC,KAAK,IAAInI,CAAC,GAAGiI,aAAa,EAAEjI,CAAC,IAAImI,WAAW,EAAEnI,CAAC,EAAE,EAAE;EACjD,MAAA,IAAI4H,WAAW,CAAC5H,CAAC,CAAC,EAAE;EAClB,QAAA,IAAIyI,OAAO,GAAGb,WAAW,CAAC5H,CAAC,CAAC,CAACmG,EAAE,CAAA;EAC/BA,QAAAA,EAAE,CAACsB,WAAW,CAACgB,OAAO,CAAC,CAAA;EACzB,OAAA;EACF,KAAA;EACF,GAAA;EACF;;ECzLA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAKA;EACO,SAASE,aAAa,CAACC,GAAG,EAAE;EACjC;EACA;EACAA,EAAAA,GAAG,CAACC,SAAS,CAACC,EAAE,GAAG,YAAY;EAC7B,IAAA,OAAOnD,kBAAkB,CAAC,IAAI,EAAE,GAAGoD,SAAS,CAAC,CAAA;KAC9C,CAAA;EACD;EACAH,EAAAA,GAAG,CAACC,SAAS,CAACG,EAAE,GAAG,YAAY;EAC7B,IAAA,OAAOlD,eAAe,CAAC,IAAI,EAAE,GAAGiD,SAAS,CAAC,CAAA;KAC3C,CAAA;EACDH,EAAAA,GAAG,CAACC,SAAS,CAACI,EAAE,GAAG,UAAUxJ,KAAK,EAAE;EAClC,IAAA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE,OAAOA,KAAK,CAAA;EAC3C,IAAA,OAAOc,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC,CAAA;KAC7B,CAAA;EACDmJ,EAAAA,GAAG,CAACC,SAAS,CAACK,OAAO,GAAG,YAAY;EAClC;MACA,MAAM1E,EAAE,GAAG,IAAI,CAAA;MACf,OAAOA,EAAE,CAAC2E,QAAQ,CAACvH,MAAM,CAAC2D,IAAI,CAACf,EAAE,CAAC,CAAC;KACpC,CAAA;;EACDoE,EAAAA,GAAG,CAACC,SAAS,CAACO,OAAO,GAAG,UAAUvD,KAAK,EAAE;EACvC;MACA,MAAMrB,EAAE,GAAG,IAAI,CAAA;EACf,IAAA,MAAM2B,EAAE,GAAG3B,EAAE,CAAC6E,GAAG,CAAA;EACjB;MACA7E,EAAE,CAAC6E,GAAG,GAAGtC,KAAK,CAACZ,EAAE,EAAEN,KAAK,CAAC,CAAA;KAC1B,CAAA;EACH,CAAA;;EAEA;EACO,SAASyD,cAAc,CAAC9E,EAAE,EAAE2B,EAAE,EAAE;EACrC;IACA3B,EAAE,CAAC6E,GAAG,GAAGlD,EAAE,CAAA;IAEX,MAAMoD,eAAe,GAAG,MAAM;EAC5B;EACA;EACA/E,IAAAA,EAAE,CAAC4E,OAAO,CAAC5E,EAAE,CAAC0E,OAAO,EAAE,CAAC,CAAA;KACzB,CAAA;;EAED;IACA,MAAM5G,OAAO,GAAG,IAAIiC,OAAO,CAACC,EAAE,EAAE+E,eAAe,EAAE,IAAI,CAAC,CAAA;EACtD7H,EAAAA,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEW,OAAO,CAAC,CAAA;EACjC,CAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACO,SAASkH,QAAQ,CAAChF,EAAE,EAAEiF,IAAI,EAAE;EACjC,EAAA,MAAMC,QAAQ,GAAGlF,EAAE,CAAC2E,QAAQ,CAACM,IAAI,CAAC,CAAA;EAClC,EAAA,IAAIC,QAAQ,EAAE;MACZA,QAAQ,CAACvJ,OAAO,CAACwJ,OAAO,IAAIA,OAAO,CAACpE,IAAI,CAACf,EAAE,CAAC,CAAC,CAAA;EAC/C,GAAA;EACF;;ECvEA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIoF,aAAa,GAAGC,KAAK,CAAChB,SAAS,CAAC;EACpC;EACO,IAAIiB,aAAa,GAAGC,MAAM,CAACC,MAAM,CAACJ,aAAa,CAAC,CAAA;;EAEvD;EACA,IAAIK,OAAO,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;;EAE/EA,OAAO,CAAC9J,OAAO,CAAC+J,MAAM,IAAI;EACxB;EACAJ,EAAAA,aAAa,CAACI,MAAM,CAAC,GAAG,UAAU,GAAGC,IAAI,EAAE;EACzC;EACA,IAAA,MAAMC,MAAM,GAAGR,aAAa,CAACM,MAAM,CAAC,CAAC3E,IAAI,CAAC,IAAI,EAAE,GAAG4E,IAAI,CAAC,CAAC;;EAEzD;EACA,IAAA,IAAIE,QAAQ,CAAA;EACZ,IAAA,IAAIC,EAAE,GAAG,IAAI,CAACC,MAAM,CAAA;EAEpB,IAAA,QAAQL,MAAM;EACZ,MAAA,KAAK,MAAM,CAAA;EACX,MAAA,KAAK,SAAS;EAAE;EACdG,QAAAA,QAAQ,GAAGF,IAAI,CAAA;EACf,QAAA,MAAA;EACF,MAAA,KAAK,QAAQ;EAAE;EACbE,QAAAA,QAAQ,GAAGF,IAAI,CAAC1J,KAAK,CAAC,CAAC,CAAC,CAAA;EAEnB,KAAA;EAGT,IAAA,IAAI4J,QAAQ,EAAE;EACZ;EACAC,MAAAA,EAAE,CAACE,YAAY,CAACH,QAAQ,CAAC,CAAA;EAC3B,KAAA;;EAEA;EACAC,IAAAA,EAAE,CAACjF,GAAG,CAAC9C,MAAM,EAAE,CAAA;EACf,IAAA,OAAO6H,MAAM,CAAA;KACd,CAAA;EACH,CAAC,CAAC;;EC5CF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAKA,MAAMK,QAAQ,CAAC;IACbzI,WAAW,CAAC4D,IAAI,EAAE;EAChB;EACA;EACA;EACA;EACA,IAAA,IAAI,CAACP,GAAG,GAAG,IAAItD,GAAG,EAAE,CAAA;;EAEpB;EACAgI,IAAAA,MAAM,CAACW,cAAc,CAAC9E,IAAI,EAAE,QAAQ,EAAE;EACpCnG,MAAAA,KAAK,EAAE,IAAI;QACXkL,UAAU,EAAE,KAAK;EACnB,KAAC,CAAC,CAAA;;EAEF,IAAA,IAAId,KAAK,CAACe,OAAO,CAAChF,IAAI,CAAC,EAAE;EACvB;QACAA,IAAI,CAACiF,SAAS,GAAGf,aAAa,CAAA;EAC9B,MAAA,IAAI,CAACU,YAAY,CAAC5E,IAAI,CAAC,CAAC;EAC1B,KAAC,MAAM;EACL,MAAA,IAAI,CAACkF,IAAI,CAAClF,IAAI,CAAC,CAAA;EACjB,KAAA;EACF,GAAA;;EAEA;EACA;EACA;EACA;EACA;IACAkF,IAAI,CAAClF,IAAI,EAAE;MACTmE,MAAM,CAACgB,IAAI,CAACnF,IAAI,CAAC,CAACzF,OAAO,CAACE,GAAG,IAAI2K,cAAc,CAACpF,IAAI,EAAEvF,GAAG,EAAEuF,IAAI,CAACvF,GAAG,CAAC,CAAC,CAAC,CAAA;EACxE,GAAA;;EAEA;IACAmK,YAAY,CAAC5E,IAAI,EAAE;MACjBA,IAAI,CAACzF,OAAO,CAACC,IAAI,IAAIqD,OAAO,CAACrD,IAAI,CAAC,CAAC,CAAA;EACrC,GAAA;EACF,CAAA;;EAEA;EACA,SAAS6K,WAAW,CAACxL,KAAK,EAAE;EAC1B,EAAA,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,CAACT,MAAM,EAAEgB,CAAC,EAAE,EAAE;EACrC,IAAA,IAAIkL,OAAO,GAAGzL,KAAK,CAACO,CAAC,CAAC,CAAA;MACtBkL,OAAO,CAACX,MAAM,IAAIW,OAAO,CAACX,MAAM,CAAClF,GAAG,CAACnD,MAAM,EAAE,CAAA;EAC7C,IAAA,IAAI2H,KAAK,CAACe,OAAO,CAACM,OAAO,CAAC,EAAE;QAC1BD,WAAW,CAACC,OAAO,CAAC,CAAA;EACtB,KAAA;EACF,GAAA;EACF,CAAA;;EAEA;EACO,SAASF,cAAc,CAAC7I,MAAM,EAAE9B,GAAG,EAAEZ,KAAK,EAAE;EACjD;EACA,EAAA,IAAI0L,OAAO,GAAG1H,OAAO,CAAChE,KAAK,CAAC,CAAA;EAE5B,EAAA,IAAI4F,GAAG,GAAG,IAAItD,GAAG,EAAE,CAAC;;EAEpB;EACAgI,EAAAA,MAAM,CAACW,cAAc,CAACvI,MAAM,EAAE9B,GAAG,EAAE;EACjC;EACA+E,IAAAA,GAAG,GAAG;EACJ;QACA,IAAIrD,GAAG,CAACI,MAAM,EAAE;EACdT,QAAAA,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEtB,GAAG,CAAC,CAAA;UAC5BgF,GAAG,CAACnD,MAAM,EAAE,CAAC;EACb,QAAA,IAAIiJ,OAAO,EAAE;EACXA,UAAAA,OAAO,CAAC9F,GAAG,CAACnD,MAAM,EAAE,CAAC;EACrB,UAAA,IAAI2H,KAAK,CAACe,OAAO,CAACnL,KAAK,CAAC,EAAE;EAAE;cAC1BwL,WAAW,CAACxL,KAAK,CAAC,CAAA;EACpB,WAAA;EACF,SAAA;EACF,OAAA;EACA,MAAA,OAAOA,KAAK,CAAA;OACb;EACD;MACA2L,GAAG,CAAC3F,QAAQ,EAAE;QACZ,IAAIA,QAAQ,KAAKhG,KAAK,EAAE,OAAA;;EAExB;QACAgE,OAAO,CAACgC,QAAQ,CAAC,CAAA;EACjBhG,MAAAA,KAAK,GAAGgG,QAAQ,CAAA;QAChB/D,OAAO,CAACC,GAAG,CAAC,UAAU,EAACtB,GAAG,EAACgF,GAAG,CAAC,CAAA;EAC/B;QACAA,GAAG,CAAC9C,MAAM,EAAE,CAAA;EACd,KAAA;EACF,GAAC,CAAC,CAAA;EACJ,CAAA;;EAEA;EACO,SAASkB,OAAO,CAACmC,IAAI,EAAE;EAC5B;IACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,IAAI,IAAI,EAAE;EAC5C,IAAA,OAAA;EACF,GAAA;;EAEA;EACA,EAAA,IAAIA,IAAI,CAAC2E,MAAM,YAAYE,QAAQ,EAAE;MACnC,OAAO7E,IAAI,CAAC2E,MAAM,CAAA;EACpB,GAAA;EAEA,EAAA,OAAO,IAAIE,QAAQ,CAAC7E,IAAI,CAAC,CAAA;EAC3B;;ECxHA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAOA;EACO,SAASyF,SAAS,CAAC7G,EAAE,EAAE;EAC5B,EAAA,MAAM8G,IAAI,GAAG9G,EAAE,CAAC2E,QAAQ,CAAC;;EAEzB;IACA,IAAImC,IAAI,CAAC1F,IAAI,EAAE;MACb2F,QAAQ,CAAC/G,EAAE,CAAC,CAAA;EACd,GAAA;;EAEA;IACA,IAAI8G,IAAI,CAACE,QAAQ,EAAE;MACjBC,YAAY,CAACjH,EAAE,CAAC,CAAA;EAClB,GAAA;;EAEA;IACA,IAAI8G,IAAI,CAACI,KAAK,EAAE;MACdC,SAAS,CAACnH,EAAE,CAAC,CAAA;EACf,GAAA;EACF,CAAA;;EAEA;EACA,SAAS+G,QAAQ,CAAC/G,EAAE,EAAE;EACpB,EAAA,IAAIoB,IAAI,GAAGpB,EAAE,CAAC2E,QAAQ,CAACvD,IAAI,CAAC;EAC5BA,EAAAA,IAAI,GAAG,OAAOA,IAAI,KAAK,UAAU,GAAGA,IAAI,CAACL,IAAI,CAACf,EAAE,CAAC,GAAGoB,IAAI,CAAA;EAExDpB,EAAAA,EAAE,CAACoH,KAAK,GAAGhG,IAAI,CAAC;;EAEhB;IACAnC,OAAO,CAACmC,IAAI,CAAC,CAAA;;EAEb;EACA,EAAA,KAAK,IAAIvF,GAAG,IAAIuF,IAAI,EAAE;MACpB,IAAIvF,GAAG,KAAK,OAAO,EAAE,OAAA;EAErBwL,IAAAA,KAAK,CAACrH,EAAE,EAAE,OAAO,EAAEnE,GAAG,CAAC,CAAA;EACzB,GAAA;EACF,CAAA;EAEA,SAASwL,KAAK,CAACrH,EAAE,EAAErC,MAAM,EAAE9B,GAAG,EAAE;EAC9B0J,EAAAA,MAAM,CAACW,cAAc,CAAClG,EAAE,EAAEnE,GAAG,EAAE;EAC7B;EACA+E,IAAAA,GAAG,GAAG;EACJ,MAAA,OAAOZ,EAAE,CAACrC,MAAM,CAAC,CAAC9B,GAAG,CAAC,CAAC;OACxB;;MACD+K,GAAG,CAAC3F,QAAQ,EAAE;EACZjB,MAAAA,EAAE,CAACrC,MAAM,CAAC,CAAC9B,GAAG,CAAC,GAAGoF,QAAQ,CAAA;EAC5B,KAAA;EACF,GAAC,CAAC,CAAA;EACJ,CAAA;;EAEA;EACA,SAASgG,YAAY,CAACjH,EAAE,EAAE;EACxB,EAAA,MAAMgH,QAAQ,GAAGhH,EAAE,CAAC2E,QAAQ,CAACqC,QAAQ,CAAA;IACrC,MAAMM,QAAQ,GAAItH,EAAE,CAACuH,iBAAiB,GAAG,EAAG,CAAC;EAC7C,EAAA,KAAK,IAAI1L,GAAG,IAAImL,QAAQ,EAAE;EACxB,IAAA,IAAIQ,OAAO,GAAGR,QAAQ,CAACnL,GAAG,CAAC,CAAA;;EAE3B;MACA,IAAI4L,EAAE,GAAG,OAAOD,OAAO,KAAK,UAAU,GAAGA,OAAO,GAAGA,OAAO,CAAC5G,GAAG,CAAA;;EAE9D;MACA0G,QAAQ,CAACzL,GAAG,CAAC,GAAG,IAAIkE,OAAO,CAACC,EAAE,EAAEyH,EAAE,EAAE;EAAElH,MAAAA,IAAI,EAAE,IAAA;EAAK,KAAC,CAAC,CAAA;;EAEnD;EACAmH,IAAAA,cAAc,CAAC1H,EAAE,EAAEnE,GAAG,EAAE2L,OAAO,CAAC,CAAA;EAClC,GAAA;EACF,CAAA;;EAEA;EACA,SAASE,cAAc,CAAC/J,MAAM,EAAE9B,GAAG,EAAE2L,OAAO,EAAE;IAC5C,MAAMG,MAAM,GAAGH,OAAO,CAACZ,GAAG,KAAK,MAAM,EAAE,CAAC,CAAA;EAExCrB,EAAAA,MAAM,CAACW,cAAc,CAACvI,MAAM,EAAE9B,GAAG,EAAE;EACjC+E,IAAAA,GAAG,EAAEgH,oBAAoB,CAAC/L,GAAG,CAAC;EAC9B+K,IAAAA,GAAG,EAAEe,MAAAA;EACP,GAAC,CAAC,CAAA;EACJ,CAAA;;EAEA;EACA,SAASC,oBAAoB,CAAC/L,GAAG,EAAE;EACjC,EAAA,OAAO,YAAY;MACjB,MAAMiC,OAAO,GAAG,IAAI,CAACyJ,iBAAiB,CAAC1L,GAAG,CAAC,CAAC;;EAE5C;MACA,IAAIiC,OAAO,CAAC0C,KAAK,EAAE;QACjB1C,OAAO,CAACoD,QAAQ,EAAE,CAAC;EACrB,KAAA;;EAEA;EACA;MACA,IAAI3D,GAAG,CAACI,MAAM,EAAE;QACdG,OAAO,CAACJ,MAAM,EAAE,CAAA;EAClB,KAAA;;EAEA;MACA,OAAOI,OAAO,CAAC7C,KAAK,CAAA;KACrB,CAAA;EACH,CAAA;;EAEA;EACA,SAASkM,SAAS,CAACnH,EAAE,EAAE;EACrB,EAAA,IAAIkH,KAAK,GAAGlH,EAAE,CAAC2E,QAAQ,CAACuC,KAAK,CAAA;EAC7B,EAAA,KAAK,IAAIrL,GAAG,IAAIqL,KAAK,EAAE;EACrB,IAAA,MAAM/B,OAAO,GAAG+B,KAAK,CAACrL,GAAG,CAAC,CAAC;EAC3B,IAAA,IAAIwJ,KAAK,CAACe,OAAO,CAACjB,OAAO,CAAC,EAAE;EAC1B,MAAA,KAAK,IAAI3J,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2J,OAAO,CAAC3K,MAAM,EAAEgB,CAAC,EAAE,EAAE;UACvCqM,aAAa,CAAC7H,EAAE,EAAEnE,GAAG,EAAEsJ,OAAO,CAAC3J,CAAC,CAAC,CAAC,CAAA;EACpC,OAAA;EACF,KAAC,MAAM;EACLqM,MAAAA,aAAa,CAAC7H,EAAE,EAAEnE,GAAG,EAAEsJ,OAAO,CAAC,CAAA;EACjC,KAAA;EACF,GAAA;EACF,CAAA;;EAEA;EACA,SAAS0C,aAAa,CAAC7H,EAAE,EAAEnE,GAAG,EAAEsJ,OAAO,EAAE;IACvC,IAAIjF,OAAO,GAAG,EAAE,CAAA;EAChB;EACA,EAAA,IAAI,OAAOiF,OAAO,KAAK,QAAQ,EAAE;EAC/BA,IAAAA,OAAO,GAAGnF,EAAE,CAACmF,OAAO,CAAC,CAAA;EACvB,GAAA;EACA;EAAA,OACK,IAAII,MAAM,CAAClB,SAAS,CAACyD,QAAQ,CAAC/G,IAAI,CAACoE,OAAO,CAAC,KAAK,iBAAiB,EAAE;EACtEjF,IAAAA,OAAO,GAAGiF,OAAO,CAAA;MACjBA,OAAO,GAAGA,OAAO,CAACA,OAAO,CAAA;EAC3B,GAAA;IACA,OAAOnF,EAAE,CAAC+H,MAAM,CAAClM,GAAG,EAAEsJ,OAAO,EAAEjF,OAAO,CAAC,CAAA;EACzC,CAAA;;EAEA;EACO,SAAS8H,cAAc,CAAC5D,GAAG,EAAE;EAClCA,EAAAA,GAAG,CAACC,SAAS,CAAC4D,SAAS,GAAG3I,QAAQ,CAAC;;EAEnC;EACA8E,EAAAA,GAAG,CAACC,SAAS,CAAC0D,MAAM,GAAG,UAAU9H,QAAQ,EAAE1B,EAAE,EAAE2B,OAAO,GAAG,EAAE,EAAE;MAC3DA,OAAO,CAACO,IAAI,GAAG,IAAI,CAAA;EACnB;EACA,IAAA,MAAM3C,OAAO,GAAG,IAAIiC,OAAO,CAAC,IAAI,EAAEE,QAAQ,EAAEC,OAAO,EAAE3B,EAAE,CAAC,CAAA;;EAExD;MACA,IAAI2B,OAAO,CAACgI,SAAS,EAAE;QACrB3J,EAAE,CAACwC,IAAI,CAAC,IAAI,EAAEjD,OAAO,CAAC7C,KAAK,EAAE0F,SAAS,CAAC,CAAA;EACzC,KAAA;KACD,CAAA;EACH;;ECpKA;EACA;EACA;EACA;;EAEA,MAAMwH,MAAM,GAAG,EAAE,CAAA;EACjB,MAAMC,SAAS,GAAG,CAAC,cAAc,EAAE,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,cAAc,EAAE,SAAS,EAAE,eAAe,EAAE,WAAW,CAAC,CAAA;EAChIA,SAAS,CAACzM,OAAO,CAACsJ,IAAI,IAAI;IACxBkD,MAAM,CAAClD,IAAI,CAAC,GAAG,UAAUoD,CAAC,EAAEC,CAAC,EAAE;EAC7B;EACA;EACA;EACA,IAAA,IAAIA,CAAC,EAAE;EACL,MAAA,IAAID,CAAC,EAAE;EACL;EACA,QAAA,OAAOA,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC,CAAA;EACpB,OAAC,MAAM;EACL;UACA,OAAO,CAACA,CAAC,CAAC,CAAA;EACZ,OAAA;EACF,KAAC,MAAM;EACL,MAAA,OAAOD,CAAC,CAAC;EACX,KAAA;KACD,CAAA;EACH,CAAC,CAAC,CAAA;;EAEF;EACO,SAASG,YAAY,CAAC1O,MAAM,EAAE+C,KAAK,EAAE;IAC1C,MAAMqD,OAAO,GAAG,EAAE,CAAA;EAClB;EACA,EAAA,KAAK,IAAIrE,GAAG,IAAI/B,MAAM,EAAE;MACtB2O,UAAU,CAAC5M,GAAG,CAAC,CAAA;EACjB,GAAA;EACA;EACA,EAAA,KAAK,IAAIA,GAAG,IAAIgB,KAAK,EAAE;EACrB,IAAA,IAAI,CAAC/C,MAAM,CAAC4O,cAAc,CAAC7M,GAAG,CAAC,EAAE;QAC/B4M,UAAU,CAAC5M,GAAG,CAAC,CAAA;EACjB,KAAA;EACF,GAAA;IAEA,SAAS4M,UAAU,CAAC5M,GAAG,EAAE;EACvB;EACA,IAAA,IAAIsM,MAAM,CAACtM,GAAG,CAAC,EAAE;EACfqE,MAAAA,OAAO,CAACrE,GAAG,CAAC,GAAGsM,MAAM,CAACtM,GAAG,CAAC,CAAC/B,MAAM,CAAC+B,GAAG,CAAC,EAAEgB,KAAK,CAAChB,GAAG,CAAC,CAAC,CAAA;EACrD,KAAC,MAAM;EACL;EACAqE,MAAAA,OAAO,CAACrE,GAAG,CAAC,GAAGgB,KAAK,CAAChB,GAAG,CAAC,IAAI/B,MAAM,CAAC+B,GAAG,CAAC,CAAA;EAC1C,KAAA;EACF,GAAA;EACA,EAAA,OAAOqE,OAAO,CAAA;EAChB;;EClDA;EACA;EACA;;EAOA;EACO,SAASyI,SAAS,CAACvE,GAAG,EAAE;EAC7B;EACAA,EAAAA,GAAG,CAACC,SAAS,CAACuE,KAAK,GAAG,UAAU1I,OAAO,EAAE;EACvC;MACA,MAAMF,EAAE,GAAG,IAAI,CAAA;EACf;EACAA,IAAAA,EAAE,CAAC2E,QAAQ,GAAG6D,YAAY,CAAC,IAAI,CAAChL,WAAW,CAAC0C,OAAO,EAAEA,OAAO,CAAC,CAAA;EAE7D8E,IAAAA,QAAQ,CAAChF,EAAE,EAAE,cAAc,CAAC,CAAC;;EAE7B;MACA6G,SAAS,CAAC7G,EAAE,CAAC,CAAA;EAEbgF,IAAAA,QAAQ,CAAChF,EAAE,EAAE,SAAS,CAAC,CAAC;;MAExB,IAAIE,OAAO,CAACyB,EAAE,EAAE;EACd3B,MAAAA,EAAE,CAAC6I,MAAM,CAAC3I,OAAO,CAACyB,EAAE,CAAC,CAAC;EACxB,KAAA;KACD,CAAA;;EACDyC,EAAAA,GAAG,CAACC,SAAS,CAACwE,MAAM,GAAG,UAAUlH,EAAE,EAAE;MACnC,MAAM3B,EAAE,GAAG,IAAI,CAAA;EACf2B,IAAAA,EAAE,GAAG5C,QAAQ,CAAC+J,aAAa,CAACnH,EAAE,CAAC,CAAA;EAC/B,IAAA,IAAIoH,GAAG,GAAG/I,EAAE,CAAC2E,QAAQ,CAAA;;EAErB;EACA,IAAA,IAAI,CAACoE,GAAG,CAAC3L,MAAM,EAAE;EACf,MAAA,IAAIH,QAAQ,CAAA;EACZ;EACA,MAAA,IAAI8L,GAAG,CAAC9L,QAAQ,IAAI0E,EAAE,EAAE;UACtB1E,QAAQ,GAAG8L,GAAG,CAAC9L,QAAQ,CAAA;SACxB,MAAM,IAAI,CAAC8L,GAAG,CAAC9L,QAAQ,IAAI0E,EAAE,EAAE;UAC9B1E,QAAQ,GAAG0E,EAAE,CAACqH,SAAS,CAAA;EACzB,OAAA;QACA,IAAI/L,QAAQ,IAAI0E,EAAE,EAAE;EAClB;EACA,QAAA,MAAMvE,MAAM,GAAGJ,iBAAiB,CAACC,QAAQ,CAAC,CAAA;EAC1C8L,QAAAA,GAAG,CAAC3L,MAAM,GAAGA,MAAM,CAAC;EACtB,OAAA;EACF,KAAA;;EACA0H,IAAAA,cAAc,CAAC9E,EAAE,EAAE2B,EAAE,CAAC,CAAC;;EAEvB;EACA;KACD,CAAA;EACH;;ECtDA;EACA;EACA;EAIO,SAASsH,aAAa,CAAC7E,GAAG,EAAE;EACjC;EACAA,EAAAA,GAAG,CAAClE,OAAO,GAAG,EAAE,CAAA;EAChB;EACAkE,EAAAA,GAAG,CAAC8E,KAAK,GAAG,UAAUA,KAAK,EAAE;EAC3B;MACA,IAAI,CAAChJ,OAAO,GAAGsI,YAAY,CAAC,IAAI,CAACtI,OAAO,EAAEgJ,KAAK,CAAC,CAAA;EAChD,IAAA,OAAO,IAAI,CAAA;KACZ,CAAA;EACH;;ECfA;EAUA,MAAMC,SAAS,GAAG,YAAY;EAC5B;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;IACA,IAAIC,OAAO,GAAGpM,iBAAiB,CAAE,CAAA;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,SAAA,CAAU,CACP,CAAA;IACD,IAAIqM,OAAO,GAAGrM,iBAAiB,CAAE,CAAA;AACnC;AACA;AACA;AACA;AACA,SAAA,CAAU,CAAC,CAAA;IAET,OAAO;MACLoM,OAAO;EACPC,IAAAA,OAAAA;KACD,CAAA;EACH,CAAC,CAAA;EAEM,MAAMC,QAAQ,GAAG,YAAY;EAClC,EAAA,IAAIF,OAAO,GAAGD,SAAS,EAAE,CAACC,OAAO,CAAA;EACjC,EAAA,IAAIG,GAAG,GAAG,IAAInF,GAAG,CAAC;EAChBhD,IAAAA,IAAI,EAAE;EACJpG,MAAAA,IAAI,EAAE,MAAA;EACR,KAAA;EACF,GAAC,CAAC,CAAA;EACF,EAAA,IAAIwO,SAAS,GAAGJ,OAAO,CAACrI,IAAI,CAACwI,GAAG,CAAC,CAAA;EACjC,EAAA,IAAI5H,EAAE,GAAGD,SAAS,CAAC8H,SAAS,CAAC,CAAA;EAC7BzK,EAAAA,QAAQ,CAAC0K,IAAI,CAAC3H,WAAW,CAACH,EAAE,CAAC,CAAA;EAE7B,EAAA,IAAI0H,OAAO,GAAGF,SAAS,EAAE,CAACE,OAAO,CAAA;EACjC,EAAA,IAAIK,GAAG,GAAG,IAAItF,GAAG,CAAC;EAChBhD,IAAAA,IAAI,EAAE;EACJpG,MAAAA,IAAI,EAAE,MAAA;EACR,KAAA;EACF,GAAC,CAAC,CAAA;EACF,EAAA,IAAI2O,SAAS,GAAGN,OAAO,CAACtI,IAAI,CAAC2I,GAAG,CAAC,CAAA;EAEjCrK,EAAAA,UAAU,CAAC,MAAM;EACfkD,IAAAA,KAAK,CAACiH,SAAS,EAAEG,SAAS,CAAC,CAAA;KAC5B,EAAE,IAAI,CAAC,CAAA;EACV,CAAC;;EC3ID;EACA;EACA;;EAOA;EACA,SAASvF,GAAG,CAAClE,OAAO,EAAE;EACpB,EAAA,IAAI,CAAC0I,KAAK,CAAC1I,OAAO,CAAC,CAAC;EACtB,CAAA;;EAEAyI,SAAS,CAACvE,GAAG,CAAC,CAAC;EACfD,aAAa,CAACC,GAAG,CAAC,CAAC;EACnB4D,cAAc,CAAC5D,GAAG,CAAC,CAAC;;EAEpB6E,aAAa,CAAC7E,GAAG,CAAC,CAAC;;EAEnBkF,QAAQ,EAAE,CAAC;;;;;;;;"}